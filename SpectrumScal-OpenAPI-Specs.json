{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.0.0",
    "title" : "Liberty REST APIs"
  },
  "host" : "192.168.1.160:1080",
  "tags" : [ {
    "name" : "Spectrum Scale REST API v2",
    "description" : "APIs for managing a Spectrum Scale cluster"
  } ],
  "securityDefinitions" : {
    "basicAuth" : {
      "description" : "",
      "type" : "basic"
    }
  },
  "definitions" : {
    "NodeInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "nodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Node"
          }
        }
      }
    },
    "CnfsNodeInfo" : {
      "type" : "object",
      "properties" : {
        "cnfsState" : {
          "type" : "string",
          "example" : "enabled",
          "description" : "The state of CNFS on this node"
        },
        "cnfsGroupId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5,
          "description" : "The CNFS Group ID"
        },
        "cnfsIplist" : {
          "type" : "string",
          "example" : "10.0.100.1,10.0.100.2",
          "description" : "A list of CNFS IP addresses"
        }
      },
      "description" : "Information about a cNFS node"
    },
    "Fileset" : {
      "type" : "object",
      "required" : [ "filesystemName" ],
      "properties" : {
        "filesetName" : {
          "type" : "string",
          "example" : "myFset1",
          "description" : "The name of the fileset"
        },
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The filesystem name"
        },
        "config" : {
          "$ref" : "#/definitions/FilesetConfig"
        },
        "afm" : {
          "$ref" : "#/definitions/FilesetAfm"
        },
        "usage" : {
          "$ref" : "#/definitions/FilesetUsage"
        }
      },
      "description" : "Summary information about a fileset"
    },
    "QuotaDefaultsFsConfig" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies that default quotas for users are to be activated."
        },
        "group" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies that default quotas for groups are to be activated."
        },
        "fileset" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies that default quotas for filesets are to be activated."
        },
        "assign" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Assigns the default quota limits to/of existing users, groups, or filesets when quota defaults are enabled."
        },
        "reset" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Reset the default quota limits to/of existing users, groups, or filesets when quota defaults are disabled."
        }
      }
    },
    "OwningCluster" : {
      "type" : "object",
      "properties" : {
        "owningCluster" : {
          "type" : "string",
          "description" : "The owning cluster of the remote filesystem"
        },
        "contactNodes" : {
          "type" : "array",
          "description" : "The contact nodes of the owning cluster used for remote mounting",
          "items" : {
            "type" : "string"
          }
        },
        "keyDigest" : {
          "type" : "string",
          "description" : "The SHA digest of the public key ow the owning cluster."
        },
        "filesystemPairs" : {
          "type" : "array",
          "example" : "{ {'owningClusterFilesystem':'fs1', 'remoteClusterFilesystem':'fs1_remote'}, {'owningClusterFilesystem':'fs2', 'remoteClusterFilesystem':'fs2_remote'} }",
          "description" : "The mapping of filesystems of owning cluster and remote cluster",
          "items" : {
            "$ref" : "#/definitions/FilesystemPair"
          }
        }
      },
      "description" : "Summary information about a cluster that owns filesystems to be mounted remotely"
    },
    "Node" : {
      "type" : "object",
      "properties" : {
        "adminNodeName" : {
          "type" : "string",
          "example" : "testnode1-a.localnet.com",
          "description" : "The hostname used by the GPFS admin network"
        },
        "nodeNumber" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The GPFS node id"
        },
        "config" : {
          "$ref" : "#/definitions/NodeConfig"
        },
        "status" : {
          "$ref" : "#/definitions/NodeStatus"
        },
        "network" : {
          "$ref" : "#/definitions/NodeNetworkInfo"
        },
        "roles" : {
          "$ref" : "#/definitions/NodeRoles"
        },
        "cnfsInfo" : {
          "$ref" : "#/definitions/CnfsNodeInfo"
        },
        "cesInfo" : {
          "$ref" : "#/definitions/CESNodeInfo"
        }
      },
      "description" : "Summary information about a Node"
    },
    "FailbackToPrimary" : {
      "type" : "object",
      "required" : [ "action" ],
      "properties" : {
        "action" : {
          "type" : "string",
          "example" : "start",
          "description" : "The action of the failback",
          "enum" : [ "start", "stop" ]
        },
        "force" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Used if stop or start does not complete successfully due to any errors, and not allow failbackToPrimary to stop or start again."
        }
      }
    },
    "Http400BadRequest" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 400,
          "description" : "The HTTP status code that was returned by the request"
        },
        "message" : {
          "type" : "string",
          "example" : "...",
          "description" : "The detailed success/error message"
        }
      }
    },
    "ThresholdsInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "thresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        }
      }
    },
    "NsdCapacity4Licensing" : {
      "type" : "object",
      "properties" : {
        "nsdName" : {
          "type" : "string",
          "example" : "disk37",
          "description" : "The name of the NSD."
        },
        "liableCapacity" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 2623752159,
          "description" : "The capacity of the NSD (in Bytes)."
        },
        "lastUpdate" : {
          "$ref" : "#/definitions/FsccDate"
        },
        "uniqueID" : {
          "type" : "string"
        }
      },
      "description" : "Capacity liable for licensing when a capacity based license model is applied"
    },
    "FailoverToSecondary" : {
      "type" : "object",
      "required" : [ "restore" ],
      "properties" : {
        "restore" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies that restoring type"
        }
      }
    },
    "OwningClusterCreateUpdate" : {
      "type" : "object",
      "required" : [ "key", "owningCluster" ],
      "properties" : {
        "owningCluster" : {
          "type" : "string",
          "description" : "The owning cluster of the remote filesystem"
        },
        "contactNodes" : {
          "type" : "array",
          "example" : "['node1', 'node2']",
          "description" : "The contact nodes of the owning cluster used for remote mounting",
          "items" : {
            "type" : "string"
          }
        },
        "key" : {
          "type" : "array",
          "description" : "The public RSA key of the owning cluster",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Information for registering a cluster that owns filesystems to be mounted remotely"
    },
    "RecoveryGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "RG1",
          "description" : "The name of the recovery group"
        },
        "declusteredArrayCount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Count of the declareted array"
        },
        "capacity" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12878459437056,
          "description" : "Capacity of the recovery group"
        },
        "freeSpace" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12878459437056,
          "description" : "The free space of the recovery group"
        },
        "usedSpace" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12878459437056,
          "description" : "The used space of the recovery group"
        },
        "nodes" : {
          "type" : "array",
          "example" : "gss-21.localnet.com",
          "description" : "The name of the recovery group servers.",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "paired",
          "description" : "The type of the recovery group.",
          "enum" : [ "paired", "shared", "scale-out", "unknown" ]
        },
        "className" : {
          "type" : "string",
          "example" : "nc1",
          "description" : "The nodeclass of the recovery group."
        },
        "mmvdiskControlled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if the recovery group was created with mmvdisk."
        },
        "vdiskCount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Count of the vdisks"
        },
        "pdiskCount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 24,
          "description" : "Count of the pdisks"
        }
      },
      "description" : "Detailed information about a recovery group configuration"
    },
    "CapacityLiable4Licensing" : {
      "type" : "object",
      "properties" : {
        "liableNsdCount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 26,
          "description" : "The number of NSDs that are liable for licensing."
        },
        "liableCapacity" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 2161114103556,
          "description" : "The total capacity in the cluster that is liable for licensing (in Bytes)."
        },
        "liableNsds" : {
          "type" : "array",
          "description" : "The individual NSDs that are liable for licensing.",
          "items" : {
            "$ref" : "#/definitions/NsdCapacity4Licensing"
          }
        },
        "lastUpdate" : {
          "$ref" : "#/definitions/FsccDate"
        },
        "uniqueID" : {
          "type" : "string"
        }
      },
      "description" : "Capacity liable for licensing when a capcity based license model is applied"
    },
    "ConfigUpdate" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "type" : "object",
          "example" : "afmDirLookupRefreshInterval:77",
          "description" : "List of attributes and their values to be changed",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "immediately" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Changes take effect immediately, they do persist when GPFS is restarted. Valid only for specific attributtes"
        },
        "nodes" : {
          "type" : "array",
          "example" : "testnode-11",
          "description" : "List of nodes or nodeclasses. If not specified, the default the nodeclass 'all' is used",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Summary information about an update of GPFS config"
    },
    "SystemHealthStatesInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "states" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SystemHealthState"
          }
        }
      }
    },
    "NodeClassChange" : {
      "type" : "object",
      "properties" : {
        "operation" : {
          "type" : "string",
          "example" : "add",
          "description" : "The change operation to perform. Either 'add', 'delete' or 'replace'."
        },
        "members" : {
          "type" : "array",
          "example" : "['mari-11', 'CloudOne']",
          "description" : "The list of nodes being part of the nodeclass",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Change information for an existing user-defined GPFS nodeclass"
    },
    "NodeCreate" : {
      "type" : "object",
      "properties" : {
        "nodesDesc" : {
          "type" : "array",
          "example" : "[ 'mari-16:manager-quorum', 'mari-17::mari-17_admin' ]",
          "description" : "The list of the node descriptions that shall be added to the GPFS cluster.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Descriptions of one or multiple Nodes that shall be added to a GPFS cluster"
    },
    "SnapshotCreate" : {
      "type" : "object",
      "required" : [ "snapshotName" ],
      "properties" : {
        "snapshotName" : {
          "type" : "string",
          "example" : "snap2",
          "description" : "The name of the snapshot to create"
        }
      },
      "description" : "Summary information about a Snapshot"
    },
    "CESSummary" : {
      "type" : "object",
      "properties" : {
        "cesSharedRoot" : {
          "type" : "string",
          "example" : "/mnt/objfs/ces",
          "description" : "The CES shared root directory"
        },
        "enabledServices" : {
          "type" : "string",
          "example" : "SMB,NFS",
          "description" : "A list of enabled CES services"
        },
        "logLevel" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The log level of CES"
        },
        "addressPolicy" : {
          "type" : "string",
          "example" : "even-coverage",
          "description" : "The CES address policy"
        }
      },
      "description" : "Summary information about CES"
    },
    "Threshold" : {
      "type" : "object",
      "properties" : {
        "ruleName" : {
          "type" : "string"
        },
        "frequency" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 300,
          "description" : "The period (in seconds) specifying the time between executions of the rule."
        },
        "tags" : {
          "type" : "string",
          "example" : "300",
          "description" : "Used internally to map events to components (pool_data, pool_meta-data, fset_inode, thresholds)."
        },
        "userActionWarn" : {
          "type" : "string",
          "example" : "Message Text",
          "description" : "A user defined message that is included in the event message when the warn threshold is triggered."
        },
        "userActionError" : {
          "type" : "string",
          "example" : "Message Text",
          "description" : "A user defined message that is included in the event message when the error threshold is triggered."
        },
        "type" : {
          "type" : "string",
          "example" : "metric",
          "description" : "The type of the threshold, either metric or measurement."
        },
        "metric" : {
          "type" : "string",
          "example" : "cpu_user",
          "description" : "The metric the threshold rule is defined on."
        },
        "metricOp" : {
          "type" : "string",
          "example" : "avg",
          "description" : "The metric operation / aggregator used for this threshold rule (sum, avg, min, max, rate). "
        },
        "sensitivity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 300,
          "description" : "The sample interval value in seconds."
        },
        "computation" : {
          "type" : "string",
          "example" : "value",
          "description" : "A rule consists of a computation element which collects and performs a computation on the collected data. There are four computations defined: value, stats (max, min, median and percentile), zimonstatus and gpfsCapacityUtil. Currently supported only 'value'."
        },
        "duration" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 300,
          "description" : "Length of collection time (in seconds)."
        },
        "filterBy" : {
          "type" : "string",
          "example" : "gpfs_fs_name=gpfs0",
          "description" : "Filters the result based on the filter key."
        },
        "groupBy" : {
          "type" : "string",
          "example" : "gpfs_fs_name=gpfs0",
          "description" : "Groups the result based on the group key."
        },
        "errorLevel" : {
          "type" : "number",
          "format" : "double",
          "example" : 90.0,
          "description" : "The threshold error limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set."
        },
        "warnLevel" : {
          "type" : "number",
          "format" : "double",
          "example" : 80.0,
          "description" : "The threshold warn limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set."
        },
        "direction" : {
          "type" : "string",
          "example" : "high",
          "description" : "The direction for the threshold limit."
        },
        "hysteresis" : {
          "type" : "number",
          "format" : "double",
          "example" : 5.0,
          "description" : "The percentage that the observed value must be under (or over) the current threshold level to switch back to the previous state."
        }
      },
      "description" : "Summary information about a threshold rule"
    },
    "RecoveryGroupInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "recoveryGroups" : {
          "type" : "array",
          "description" : "The list of the recovery groups.",
          "items" : {
            "$ref" : "#/definitions/RecoveryGroup"
          }
        }
      }
    },
    "JobResult" : {
      "type" : "object",
      "properties" : {
        "commands" : {
          "type" : "array",
          "example" : "[''mmcrfileset gpfs0 restfs1001'', ...]",
          "description" : "Executed commands in this job",
          "items" : {
            "type" : "string"
          }
        },
        "progress" : {
          "type" : "array",
          "example" : "[''(2/3) Linking fileset'']",
          "description" : "Progress information for request.",
          "items" : {
            "type" : "string"
          }
        },
        "exitCode" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Exit code of command. Zero is success, non-zero failure"
        },
        "stderr" : {
          "type" : "array",
          "example" : "[''EFSSG0740C There are not enough resources available to create a new independent file set.'',  ...]",
          "description" : "CLI messages from stderr",
          "items" : {
            "type" : "string"
          }
        },
        "stdout" : {
          "type" : "array",
          "example" : "[''EFSSG4172I The file set {0} must be independent.'', ...]",
          "description" : "CLI messages from stdout",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CESAddressInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "cesaddresses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CESAddress"
          }
        }
      }
    },
    "ClusterSummary" : {
      "type" : "object",
      "properties" : {
        "clusterName" : {
          "type" : "string",
          "example" : "gpfs-cluster-2.localnet.com",
          "description" : "The name of the GPFS cluster"
        },
        "clusterId" : {
          "type" : "integer",
          "example" : 9223372036854775800,
          "description" : "The cluster id"
        },
        "uidDomain" : {
          "type" : "string",
          "example" : "localnet.com",
          "description" : "The uid domain"
        },
        "rshPath" : {
          "type" : "string",
          "example" : "/usr/bin/ssh",
          "description" : "The path to the ssh binary used"
        },
        "rshSudoWrapper" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if sudo wrappers are enabled"
        },
        "rcpPath" : {
          "type" : "string",
          "example" : "/usr/bin/scp",
          "description" : "The path to the remote copy binary"
        },
        "rcpSudoWrapper" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if sudo wrappers are enabled"
        },
        "repositoryType" : {
          "type" : "string",
          "example" : "CCR",
          "description" : "The type of the configuration repository used"
        },
        "primaryServer" : {
          "type" : "string",
          "example" : "testnode-1.localnet.com",
          "description" : "The name of the primary server"
        },
        "secondaryServer" : {
          "type" : "string",
          "example" : "testnode-2.localnet.com",
          "description" : "The name of the secondary server"
        }
      },
      "description" : "Summary information about a cluster"
    },
    "FilesystemSettings" : {
      "type" : "object",
      "properties" : {
        "blockAllocationType" : {
          "type" : "string",
          "example" : "cluster",
          "description" : "Block allocation type"
        },
        "fileLockingSemantics" : {
          "type" : "string",
          "example" : "nfs4",
          "description" : "File locking semantics in effect, either 'nfs4' or 'posix'."
        },
        "aclSemantics" : {
          "type" : "string",
          "example" : "nfs4",
          "description" : "ACL semantics supported by this fs, either 'nfs4', 'posix' or 'all'"
        },
        "numNodes" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 32,
          "description" : "Estimated number of nodes that will mount file system"
        },
        "dmapiEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Is Data Management API enabled on this fs"
        },
        "exactMTime" : {
          "type" : "boolean",
          "example" : true,
          "description" : "'true' report exact mtime values, 'false' mtime is only periodically updated"
        },
        "suppressATime" : {
          "type" : "string",
          "example" : "no",
          "description" : "Suppress the periodic updating of the value of atime as reported by stat calls. Either 'yes', 'no' or 'relatime'."
        },
        "fastEAEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Are fast extended attributes enabled"
        },
        "encryption" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Encryption enabled"
        },
        "maxNumberOfInodes" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3211520,
          "description" : "Specifies the maximum number of files that can be created inside the inode space of the root fileset of this fs."
        },
        "is4KAligned" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Are blocks 4K aligned"
        },
        "rapidRepairEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Keep track of incomplete replication on an individual file block basis (as opposed to the entire file)."
        },
        "stripeMethod" : {
          "type" : "string",
          "example" : "round-robin",
          "description" : "Algorithm used for striping data."
        },
        "stripedLogs" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Metadata logs are striped across available metadata disks."
        },
        "fileAuditLogEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if file audit logging is enabled for this filesystem"
        }
      }
    },
    "DiskInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "disks" : {
          "type" : "array",
          "description" : "The list of the disks.",
          "items" : {
            "$ref" : "#/definitions/Disk"
          }
        }
      }
    },
    "UnmountConfiguration" : {
      "type" : "object",
      "properties" : {
        "nodes" : {
          "type" : "array",
          "example" : "testnode-11",
          "description" : "List of nodes or nodeclasses.",
          "items" : {
            "type" : "string"
          }
        },
        "clusterName" : {
          "type" : "string",
          "example" : "myRemoteClusterName",
          "description" : "(Remote) cluster name where to unmount nodes from local file system. If not provided, the local cluster will be used."
        },
        "force" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Forces the unmount to take place even though the file system may be still in use."
        }
      },
      "description" : "Summary information about an configuration for the filesystem unmount operation"
    },
    "NfsExportUpdate" : {
      "type" : "object",
      "required" : [ "nfsadd", "nfschange", "nfsposition", "nfsremove" ],
      "properties" : {
        "nfsadd" : {
          "type" : "string",
          "example" : "192.168.2.2(sectype=sys,krb5)",
          "description" : "Adds a new client declaration for the specified Path. ClientOptions can be a list of one or more client definitions."
        },
        "nfschange" : {
          "type" : "string",
          "example" : "192.168.2.2(sectype=sys,krb5)",
          "description" : "Modifies an existing client declaration for the specified Path. ClientOptions can be a list of one or more client definitions."
        },
        "nfsremove" : {
          "type" : "string",
          "example" : "192.168.2.2",
          "description" : "Removes the NFS client specified by client from the export configuration for the path."
        },
        "nfsposition" : {
          "type" : "string",
          "example" : "1",
          "description" : "It reorders the client declaration section within the export declaration file. This option can be used only together with --nfsadd or --nfschange. "
        }
      },
      "description" : "Summary information about a nfs export"
    },
    "PhysicalDiskInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "physicalDisks" : {
          "type" : "array",
          "description" : "The list of the physical disks.",
          "items" : {
            "$ref" : "#/definitions/PDisk"
          }
        }
      }
    },
    "SystemHealthEventsInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "events" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SystemHealthEvent"
          }
        }
      }
    },
    "NfsClient" : {
      "type" : "object",
      "properties" : {
        "clientName" : {
          "type" : "string",
          "example" : "192.168.2.10",
          "description" : "The hostname or IP address of the nfs server to be accessed."
        },
        "exportid" : {
          "type" : "string",
          "example" : "1",
          "description" : "The internal unique id of the export."
        },
        "access_type" : {
          "type" : "string",
          "example" : "RO",
          "description" : "Specifies the type of the access for the client.",
          "enum" : [ "none", "RO", "RW", "MDONLY", "MDONLY_RO" ]
        },
        "squash" : {
          "type" : "string",
          "example" : "Root_Squash",
          "description" : "Specifies the squashing mechanism that will by applied to the connecting client.",
          "enum" : [ "Root", "Root_Squash", "RootSquash", "All", "All_Squash", "AllSquash", "No_Root_Squash", "NoIdSquash", "None" ]
        },
        "anonUid" : {
          "type" : "string",
          "example" : "1",
          "description" : "This option explicitly set the uid of the anonymous account."
        },
        "anonGid" : {
          "type" : "string",
          "example" : "1",
          "description" : "This option explicitly set the gid of the anonymous account."
        },
        "privilegedPort" : {
          "type" : "boolean",
          "example" : false,
          "description" : "This option to specify is a client using an ephemeral port should be rejecting or not."
        },
        "sectype" : {
          "type" : "string",
          "example" : "sys",
          "description" : "The supported authentication flavors for this client.",
          "enum" : [ "sys", "krb5", "krb5i", "krb5p", "None" ]
        },
        "protocols" : {
          "type" : "string",
          "example" : "NFS4",
          "description" : "This option tells the NFSv4 server what protocol version to support.",
          "enum" : [ "3", "4", "NFS3", "NFS4", "V3", "V4", "NFSv3", "NFSv4" ]
        },
        "transportProtocol" : {
          "type" : "string",
          "example" : "TCP",
          "description" : "This option specifies the transport layer.",
          "enum" : [ "TCP", "UDP" ]
        },
        "delegations" : {
          "type" : "string",
          "example" : "none",
          "description" : "This option specifies what delegate file operations to the accessing to the client. ",
          "enum" : [ "none", "read", "write", "readwrite" ]
        },
        "manageGids" : {
          "type" : "boolean",
          "example" : false,
          "description" : "This option specifies this nfs client allow to manage gids or not."
        },
        "nfsCommit" : {
          "type" : "boolean",
          "example" : false,
          "description" : "A free text description of the export."
        }
      },
      "description" : "Summary information about a NfsClient"
    },
    "ConvertToSecondary" : {
      "type" : "object",
      "required" : [ "primaryid" ],
      "properties" : {
        "primaryid" : {
          "type" : "string",
          "example" : "88888888",
          "description" : "Specifies the ID of the primary with which the secondary will be associated."
        },
        "force" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If convertToSecondary failed or got interrupted, it will not create afmctl file at the secondary. The command should be rerun with the --force option."
        }
      }
    },
    "Snapshot" : {
      "type" : "object",
      "required" : [ "filesystemName", "snapshotName" ],
      "properties" : {
        "snapshotName" : {
          "type" : "string",
          "example" : "snap1",
          "description" : "The name of the snapshot to create"
        },
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The filesystem"
        },
        "filesetName" : {
          "type" : "string",
          "example" : "myFset1",
          "description" : "Specifies the name of the fileset. If no fileset is given the filesystem root will be snapped."
        },
        "oid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 123,
          "description" : "Internal identifier used for paging"
        },
        "snapID" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5,
          "description" : "The identifier of the snapshot"
        },
        "status" : {
          "type" : "string",
          "example" : "Valid",
          "description" : "The status of the snapshot"
        },
        "created" : {
          "type" : "string",
          "example" : "2017-01-09 14.55.37",
          "description" : "Creation time"
        },
        "quotas" : {
          "type" : "string"
        },
        "snapType" : {
          "type" : "string"
        }
      },
      "description" : "Summary information about a Snapshot"
    },
    "Header" : {
      "type" : "object",
      "properties" : {
        "bcount" : {
          "type" : "number",
          "format" : "float"
        },
        "bsize" : {
          "type" : "number",
          "format" : "float"
        },
        "t_end" : {
          "type" : "integer",
          "format" : "int64"
        },
        "t_start" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "FilesetCreate" : {
      "type" : "object",
      "required" : [ "filesetName" ],
      "properties" : {
        "filesetName" : {
          "type" : "string",
          "example" : "fset1",
          "description" : "The name of the fileset"
        },
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "The path the fileset will be linked to. If not specified the fileset will be linked to the default path, e.g. /mnt/gpfs0/fset1"
        },
        "createDirectory" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies that the directories specified with the junction path will be created if they do not exist."
        },
        "owner" : {
          "type" : "string",
          "example" : "myFsetUser1",
          "description" : "The owner of the filest"
        },
        "permissions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 700,
          "description" : "The permissions that will be set using chmod. If not specified a default ACL will be applied."
        },
        "inodeSpace" : {
          "type" : "string",
          "example" : "parentFset1",
          "description" : "The name of the parent fileset"
        },
        "maxNumInodes" : {
          "type" : "string",
          "example" : "100M",
          "description" : "Specifies the new maximum number of inodes allowed for this fileset"
        },
        "allocInodes" : {
          "type" : "string",
          "example" : "5M",
          "description" : "Specifies the new number of pre-allocated inodes for this fileset"
        },
        "permissionChangeMode" : {
          "type" : "string",
          "example" : "chmodAndSetAcl",
          "description" : "Specifies the permission change mode.",
          "enum" : [ "chmodOnly", "setAclOnly", "chmodAndSetAcl", "chmodAndUpdateAcl" ]
        },
        "comment" : {
          "type" : "string",
          "example" : "my fileset comment",
          "description" : "The comment that belongs to this fileset"
        },
        "iamMode" : {
          "type" : "string",
          "example" : "compliant",
          "description" : "Specifies the integrated archive manager (IAM) mode for the fileset.",
          "enum" : [ "compliant", "noncompliant", "advisory" ]
        },
        "afmTarget" : {
          "type" : "string",
          "example" : "nfs://10.0.100.11/gpfs/afmHomeFs/afmHomeFileset2",
          "description" : "Identifies the home that is associated with the cache"
        },
        "afmAsyncDelay" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies (in seconds) the amount of time by which write operations are delayed"
        },
        "afmDirLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmDirOpenRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such I/O operations as read or write (specified in seconds)"
        },
        "afmEnableAutoEviction" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if eviction is enabled"
        },
        "afmExpirationTimeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Is used with afmDisconnectTimeout (which can be set only through mmchconfig) to control how long a network outage between the cache and home clusters can continue before the data in the cache is considered out of sync with home."
        },
        "afmFileLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 30,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmMode" : {
          "type" : "string",
          "example" : "read-only",
          "description" : "Specifies the mode in which the cache operates",
          "enum" : [ "single-writer", "read-only", "local-updates", "independent-writer", "Primary", "Secondary" ]
        },
        "afmNumFlushThreads" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "Defines the number of threads used on each gateway to synchronize updates to the home cluster"
        },
        "afmParallelReadChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 134217728,
          "description" : "Defines the minimum chunk size of the read that needs to be distributed among the gateway nodes during parallel reads"
        },
        "afmParallelReadThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1024,
          "description" : "Defines the threshold beyond which parallel reads become effective"
        },
        "afmParallelWriteChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the minimum chunk size of the write that needs to be distributed among the gateway nodes during parallel writes"
        },
        "afmParallelWriteThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the threshold beyond which parallel writes become effective"
        },
        "afmPrefetchThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Controls partial file caching and prefetching"
        },
        "afmPrimaryID" : {
          "type" : "string",
          "description" : "Specifies the unique primary ID of the primary fileset for asynchronous data replication"
        },
        "afmRPO" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the recovery point objective (RPO) interval in minutes for a primary fileset"
        },
        "afmShowHomeSnapshots" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Controls the visibility of the home snapshot directory in cache"
        }
      },
      "description" : "Object that can be used to create a new fileset"
    },
    "PDiskDetails" : {
      "type" : "object",
      "properties" : {
        "replacementPriority" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "The value of replacement priority"
        },
        "fru" : {
          "type" : "string",
          "example" : "QEMU HARDDISK",
          "description" : "The value of field replaceable unit (FRU) of the pdisk"
        },
        "location" : {
          "type" : "string",
          "example" : "Rack Rack2 U38-41, Enclosure myEnclosure Drawer 4 Slot 8",
          "description" : "Location of the pdisk"
        },
        "wwn" : {
          "type" : "string",
          "example" : "naa.5000CCA01C514D48",
          "description" : "The value of world wide name of the pdisk"
        },
        "server" : {
          "type" : "string",
          "example" : "gss-22.localnet.com",
          "description" : "The server name of the ESS"
        },
        "rgIndex" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 23,
          "description" : "The value of recovery group index"
        },
        "vendor" : {
          "type" : "string",
          "example" : "QEMU",
          "description" : "The vendor name of the pdisk"
        },
        "product" : {
          "type" : "string",
          "example" : "QEMU HARDDISK",
          "description" : "The product name of the pdisk"
        },
        "revision" : {
          "type" : "string",
          "example" : "1.5",
          "description" : "The revision of the pdisk"
        },
        "serial" : {
          "type" : "string",
          "example" : "48",
          "description" : "The serial of the pdisk"
        },
        "hardwareType" : {
          "type" : "string",
          "example" : "ROTATING",
          "description" : "The hardware type of the pdisk"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7200,
          "description" : "The speed of the pdisk"
        }
      },
      "description" : "Detailed information about a physical disk configuration"
    },
    "Failback" : {
      "type" : "object",
      "required" : [ "action" ],
      "properties" : {
        "action" : {
          "type" : "string",
          "example" : "start",
          "description" : "The action of the failback",
          "enum" : [ "start", "stop" ]
        },
        "failoverTime" : {
          "type" : "string",
          "example" : "10",
          "description" : "Specifies the failover time"
        }
      }
    },
    "RemoteAccessStatusInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "accessStatus" : {
          "type" : "string",
          "enum" : [ "GRANTED", "PENDING", "REVOKED", "DELETED", "UNREACHABLE" ]
        }
      }
    },
    "FilesetAfm" : {
      "type" : "object",
      "properties" : {
        "afmTarget" : {
          "type" : "string",
          "example" : "nfs://10.0.100.11/gpfs/afmHomeFs/afmHomeFileset2",
          "description" : "Identifies the home that is associated with the cache"
        },
        "afmAsyncDelay" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies (in seconds) the amount of time by which write operations are delayed"
        },
        "afmDirLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmDirOpenRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such I/O operations as read or write (specified in seconds)"
        },
        "afmEnableAutoEviction" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if eviction is enabled"
        },
        "afmExpirationTimeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Is used with afmDisconnectTimeout (which can be set only through mmchconfig) to control how long a network outage between the cache and home clusters can continue before the data in the cache is considered out of sync with home."
        },
        "afmFileLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 30,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmMode" : {
          "type" : "string",
          "example" : "read-only",
          "description" : "Specifies the mode in which the cache operates",
          "enum" : [ "single-writer", "read-only", "local-updates", "independent-writer", "Primary", "Secondary" ]
        },
        "afmNumFlushThreads" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "Defines the number of threads used on each gateway to synchronize updates to the home cluster"
        },
        "afmNumWriteThreads" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "Defines the number of threads used on each participating gateway node during a parallel write"
        },
        "afmParallelReadChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 134217728,
          "description" : "Defines the minimum chunk size of the read that needs to be distributed among the gateway nodes during parallel reads"
        },
        "afmParallelReadThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1024,
          "description" : "Defines the threshold beyond which parallel reads become effective"
        },
        "afmParallelWriteChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the minimum chunk size of the write that needs to be distributed among the gateway nodes during parallel writes"
        },
        "afmParallelWriteThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the threshold beyond which parallel writes become effective"
        },
        "afmPrefetchThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Controls partial file caching and prefetching"
        },
        "afmPrimaryID" : {
          "type" : "string",
          "description" : "Specifies the unique primary ID of the primary fileset for asynchronous data replication"
        },
        "afmRPO" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the recovery point objective (RPO) interval in minutes for a primary fileset"
        },
        "afmShowHomeSnapshots" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Controls the visibility of the home snapshot directory in cache"
        },
        "afmHostMapName" : {
          "type" : "string",
          "example" : "map1",
          "description" : "The name of the AFM host map this fileset belongs to"
        },
        "afmHostMapping" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilesetAfmHostMapping"
          }
        },
        "afmHostMaps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilesetAfmHostMapping"
          }
        }
      },
      "description" : "Fileset AFM details"
    },
    "QuotaGraceDefaultsCreate" : {
      "type" : "object",
      "properties" : {
        "grace" : {
          "type" : "string"
        },
        "blockGracePeriod" : {
          "type" : "string"
        },
        "filesGracePeriod" : {
          "type" : "string"
        }
      }
    },
    "RemoteFilesystemInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "remoteFilesystems" : {
          "type" : "array",
          "description" : "remotefilesystems",
          "items" : {
            "$ref" : "#/definitions/RemoteFilesystem"
          }
        }
      }
    },
    "Legend" : {
      "type" : "object",
      "properties" : {
        "aggrType" : {
          "type" : "string"
        },
        "caption" : {
          "type" : "string"
        },
        "keys" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "semType" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "FileAuditLogConfig" : {
      "type" : "object",
      "properties" : {
        "auditFilesetDeviceName" : {
          "type" : "string",
          "example" : "logFilesystem",
          "description" : "The name of the filesystem where the filesets resides which contains the audit log records"
        },
        "auditFilesetName" : {
          "type" : "string",
          "example" : "logFileset1",
          "description" : "The name of the fileset where the audit log records are written to"
        },
        "auditRetention" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 365,
          "description" : "Number of days the audit log records are kept"
        },
        "topicGenNum" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 123,
          "description" : "The topic generation number"
        },
        "eventTypes" : {
          "type" : "string",
          "example" : "ACLCHANGE,CLOSE,CREATE,DESTROY,GPFSATTRCHANGE,OPEN,RENAME,RMDIR,UNLINK,XATTRCHANGE",
          "description" : "The event types configured for file audit logging"
        }
      }
    },
    "JobInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "jobs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Job"
          }
        }
      }
    },
    "ReplacePrimary" : {
      "type" : "object"
    },
    "SensorConfigUpdate" : {
      "type" : "object",
      "properties" : {
        "restrict" : {
          "type" : "array",
          "example" : "node-1,node-2,cesNodes",
          "description" : "A list of nodes or node classes where the sensor should run.",
          "items" : {
            "type" : "string"
          }
        },
        "period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "The period of the sensor in seconds."
        }
      }
    },
    "ApplyUpdates" : {
      "type" : "object"
    },
    "SensorConfig" : {
      "type" : "object",
      "required" : [ "period", "restrict", "sensorName" ],
      "properties" : {
        "oid" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sensorName" : {
          "type" : "string",
          "example" : "GPFSDisk",
          "description" : "The name of the sensor."
        },
        "period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "The period of the sensor in seconds."
        },
        "defaultPeriod" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "The default period of the sensor in seconds."
        },
        "minimumPeriod" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The recommended minimum period of the sensor in seconds."
        },
        "description" : {
          "type" : "string",
          "example" : "Collects CPU data from the kernel.",
          "description" : "The description of the sensor."
        },
        "restrictionType" : {
          "type" : "string",
          "example" : "SINGLETON",
          "description" : "The type of restriction of this sensor.",
          "enum" : [ "SINGLETON", "SYSTEMNODECLASS", "USERNODECLASS", "DESIGNATION", "NONE", "USERDEFINED" ]
        },
        "defaultRestriction" : {
          "type" : "string",
          "example" : "cesNodes",
          "description" : "The default restriction value."
        },
        "currentRestriction" : {
          "type" : "string",
          "example" : "cesNodes",
          "description" : "The current restriction value."
        },
        "enabledPerDefault" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if the sensor is enabled per default."
        },
        "generic" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if this is a generic sensor."
        },
        "component" : {
          "type" : "string",
          "example" : "GPFS",
          "description" : "The component this sensor belongs to."
        },
        "restrict" : {
          "type" : "array",
          "example" : "cesNodes",
          "description" : "A list of nodes and/or nodeclasses where the sensor is running on.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "NfsExportCreate" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "Specifies the path for the export."
        },
        "pseudoPath" : {
          "type" : "string",
          "example" : "/mnt/test/",
          "description" : "Specifies the path name the NFSv4 client uses to locate the directory in the server's file system tree."
        },
        "nfsClients" : {
          "type" : "array",
          "example" : "[ ''92.168.5.110(access_type=ro,squash=no_root_squash)'', ''192.168.5.111(access_type=rw,squash=no_root_squash)'' ]",
          "description" : "The list of the client declaration for the specified path.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Summary information about a nfs export."
    },
    "CliAuditLogInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "auditLogRecords" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CliAuditLogRecord"
          }
        }
      }
    },
    "FilesetAfmState" : {
      "type" : "object",
      "properties" : {
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem"
        },
        "filesetName" : {
          "type" : "string",
          "example" : "myFset1",
          "description" : "The name of the fileset"
        },
        "filesetId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The id of the fileset"
        },
        "filesetTarget" : {
          "type" : "string",
          "example" : "nfs://10.0.100.12/mnt/gpfs0/secondary_rpo",
          "description" : "The target of the fileset"
        },
        "cacheState" : {
          "type" : "string",
          "example" : "Active",
          "description" : "The Cache state of the fileset"
        },
        "gatewayNodeName" : {
          "type" : "string",
          "example" : "gpfsgui-22.localnet.com",
          "description" : "The name or ip of gateway node"
        },
        "queueLength" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The length of the afm queue"
        },
        "queueNumExec" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 21340,
          "description" : "The execution number of the afm queue"
        },
        "drState" : {
          "type" : "string",
          "example" : "Active",
          "description" : "The dr state of the afm fileset"
        },
        "oid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 158,
          "description" : "Internal identifier of the fileset afm state, used for paging"
        }
      },
      "description" : "Fileset AFM state"
    },
    "QuotaDefaultsCreate" : {
      "type" : "object",
      "properties" : {
        "quotaType" : {
          "type" : "string",
          "example" : "USR",
          "description" : "The type of the Quota defaults to set. Either USR, GRP or FILESET"
        },
        "blockSoftLimit" : {
          "type" : "string",
          "example" : "10M",
          "description" : "The quota soft limit for data. The number can be specified using the suffix K, M, G, or T"
        },
        "blockHardLimit" : {
          "type" : "string",
          "example" : "1G",
          "description" : "The quota hard limit for data. The number can be specified using the suffix K, M, G, or T"
        },
        "filesSoftLimit" : {
          "type" : "string",
          "example" : "100K",
          "description" : "The quota soft limit for files. The number can be specified using the suffix K, M, G, or T"
        },
        "filesHardLimit" : {
          "type" : "string",
          "example" : "1M",
          "description" : "The quota hard limit for files. The number can be specified using the suffix K, M, G, or T"
        }
      }
    },
    "AuthenticationKeyInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "key" : {
          "type" : "array",
          "description" : "The currently active public RSA key",
          "items" : {
            "type" : "string"
          }
        },
        "newKey" : {
          "type" : "array",
          "description" : "A new generated public RSA key. This key will become active once it's comitted. To commit this new key use PUT /scalemgmt/v2/remotemount/authenticationkey",
          "items" : {
            "type" : "string"
          }
        },
        "ciphers" : {
          "type" : "array",
          "example" : "[ 'AES128-SHA', 'AES256-SHA' ]",
          "description" : "The list of ciphers of the RSA key, or one of DEFAULT, EMPTY or AUTHONLY",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FilesystemInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "filesystems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Filesystem"
          }
        }
      }
    },
    "SnapshotInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "snapshots" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Snapshot"
          }
        }
      }
    },
    "ThresholdCreate" : {
      "type" : "object",
      "properties" : {
        "ruleName" : {
          "type" : "string"
        },
        "userActionWarn" : {
          "type" : "string",
          "example" : "Message Text",
          "description" : "A user defined message that is included in the event message when the warn threshold is triggered."
        },
        "userActionError" : {
          "type" : "string",
          "example" : "Message Text",
          "description" : "A user defined message that is included in the event message when the error threshold is triggered."
        },
        "metric" : {
          "type" : "string",
          "example" : "cpu_user",
          "description" : "The metric the threshold rule is defined on."
        },
        "sensitivity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 300,
          "description" : "The sample interval value in seconds."
        },
        "filterBy" : {
          "type" : "string",
          "example" : "gpfs_fs_name=gpfs0",
          "description" : "Filters the result based on the filter key."
        },
        "groupBy" : {
          "type" : "string",
          "example" : "gpfs_fs_name=gpfs0",
          "description" : "Groups the result based on the group key."
        },
        "errorLevel" : {
          "type" : "number",
          "format" : "double",
          "example" : 90.0,
          "description" : "The threshold error limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set."
        },
        "warnLevel" : {
          "type" : "number",
          "format" : "double",
          "example" : 80.0,
          "description" : "The threshold warn limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set."
        },
        "direction" : {
          "type" : "string",
          "example" : "high",
          "description" : "The direction for the threshold limit."
        },
        "hysteresis" : {
          "type" : "number",
          "format" : "double",
          "example" : 5.0,
          "description" : "The percentage that the observed value must be under (or over) the current threshold level to switch back to the previous state."
        }
      },
      "description" : "Description of a threshold rule that should be added to a GPFS cluster"
    },
    "FilesystemQuotaManagement" : {
      "type" : "object",
      "properties" : {
        "quota" : {
          "type" : "string",
          "example" : "fileset",
          "description" : "Change the quota option (filesystem/fileset/disabled)."
        }
      }
    },
    "SmbExportAclEntry" : {
      "type" : "object",
      "required" : [ "access", "name", "permissions", "shareName", "type" ],
      "properties" : {
        "shareName" : {
          "type" : "string",
          "example" : "myshare",
          "description" : "The name of the SMB share."
        },
        "name" : {
          "type" : "string",
          "example" : "Domain1\\User3",
          "description" : "The name of the user, group or system."
        },
        "access" : {
          "type" : "string",
          "example" : "ALLOWED",
          "description" : "Either ALLOWED or DENIED.",
          "enum" : [ "ALLOWED", "DENIED" ]
        },
        "permissions" : {
          "type" : "string",
          "example" : "FULL",
          "description" : "Either FULL, CHANGE, READ or any combination of RWXDPO."
        },
        "type" : {
          "type" : "string",
          "example" : "USER",
          "description" : "Either USER, GROUP, SYSTEM or SID. Used only when creating an access control entry",
          "enum" : [ "USER", "GROUP", "SYSTEM", "SID" ]
        }
      },
      "description" : "Individual Access Control List Entry of SMB shares"
    },
    "SmbShareUpdate" : {
      "type" : "object",
      "properties" : {
        "smbOptions" : {
          "description" : "Sets the value of the specified SMB option. ",
          "$ref" : "#/definitions/SmbOptions"
        },
        "removeSmbOptions" : {
          "type" : "array",
          "example" : "\"browseable\"",
          "description" : "Specifies the SMB option that is to be removed. ",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Summary information about an update smb share"
    },
    "FilesystemReplication" : {
      "type" : "object",
      "properties" : {
        "defaultMetadataReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Default number of metadata replicas"
        },
        "maxMetadataReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Maximum number of metadata replicas"
        },
        "defaultDataReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Default number of data replicas"
        },
        "maxDataReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Maximum number of data replicas"
        },
        "strictReplication" : {
          "type" : "string",
          "example" : "whenpossible",
          "description" : "Whether strict replication is to be enforced: 'no' not enforced, 'whenpossible' enforced if at least two failure groups present, 'always' enforced."
        },
        "logReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of log replicas"
        }
      }
    },
    "SmbExportAclInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "entries" : {
          "type" : "array",
          "description" : "ACL entries",
          "items" : {
            "$ref" : "#/definitions/SmbExportAclEntry"
          }
        }
      }
    },
    "AsyncRequestResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "jobs" : {
          "type" : "array",
          "description" : "Submitted job",
          "items" : {
            "$ref" : "#/definitions/Job"
          }
        }
      }
    },
    "FilesystemQuota" : {
      "type" : "object",
      "properties" : {
        "quotasAccountingEnabled" : {
          "type" : "string",
          "example" : "user;group;fileset",
          "description" : "Quotas accounting enabled for any of 'user', 'group' and 'fileset'. Accounting means that usage is tracked against quotas. If action should be taken when quotas are exceeded quotas must be also enforced."
        },
        "quotasEnforced" : {
          "type" : "string",
          "example" : "user;group;fileset",
          "description" : "Quotas enforced for any of 'user', 'group' and 'fileset'."
        },
        "defaultQuotasEnabled" : {
          "type" : "string",
          "example" : "none",
          "description" : "Default quotas enabled"
        },
        "perfilesetQuotas" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Is the scope of user and group quota limit checks on the individual fileset level (rather than the entire file system)."
        },
        "filesetdfEnabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies that when quotas are enforced for a fileset, the numbers reported by the df command are based on the quotas for the fileset (rather than the entire file system). Either 'yes' or 'no'."
        }
      }
    },
    "ComponentSpecificationInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        }
      }
    },
    "ServiceState" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "OBJ",
          "description" : "The name of the service",
          "enum" : [ "OBJ", "SMB", "NFS" ]
        },
        "running" : {
          "type" : "string",
          "example" : "yes",
          "description" : "Determines if the service is running or not"
        }
      },
      "description" : "Summary information about a service state"
    },
    "ConfigInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "config" : {
          "$ref" : "#/definitions/Config"
        }
      }
    },
    "FileAuditOperation" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "example" : "enable",
          "description" : "The action that shall be applied [enable, disable, update]"
        },
        "fileAuditLogConfig" : {
          "$ref" : "#/definitions/FileAuditLogConfigEnable"
        }
      }
    },
    "FileOwner" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string",
          "example" : "testuser55",
          "description" : "The name of the owning user"
        },
        "uid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1234,
          "description" : "The id of the owning user"
        },
        "group" : {
          "type" : "string",
          "example" : "mygroup",
          "description" : "The name of the owning group"
        },
        "gid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4711,
          "description" : "The id of the owning group"
        }
      },
      "description" : "POSIX owner and group information for a file or directory"
    },
    "RemoteAccessInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "remoteAccessTokens" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccessToken"
          }
        }
      }
    },
    "CESService" : {
      "type" : "object",
      "properties" : {
        "protocolStates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProtocolState"
          }
        },
        "protocolNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProtocolNode"
          }
        }
      },
      "description" : "Summary information about a CES Service"
    },
    "CESServiceInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "cesservices" : {
          "$ref" : "#/definitions/CESService"
        }
      }
    },
    "PerformanceDataInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "performanceData" : {
          "$ref" : "#/definitions/PerformanceData"
        }
      }
    },
    "ComponentElementInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        }
      }
    },
    "QuotaInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "quotas" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Quota"
          }
        }
      }
    },
    "ConvertToPrimary" : {
      "type" : "object",
      "required" : [ "afmtarget", "secondarySnapName" ],
      "properties" : {
        "afmtarget" : {
          "type" : "string",
          "example" : "nfs://9.11.102.209/gpfs/fs0/nfs-ganesha1",
          "description" : "Specifies the secondary that needs to be configured for this primary. Need not be used for AFM filesets as target would already have been defined."
        },
        "inband" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Used for inband trucking. Inband trucking is copying the data while setting up a primary/secondary relationship from GPFS filesets, where primary site has contents and secondary site is empty."
        },
        "secondarySnapName" : {
          "type" : "string",
          "example" : "Snap1",
          "description" : "Used while establishing a new primary for an existing secondary or acting primary during failback."
        },
        "noCheckMetadata" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Used if one needs to proceed with conversion without checking for appendonly/immutable files."
        },
        "rpo" : {
          "type" : "string",
          "example" : "true",
          "description" : "Specifies the RPO interval in minutes for this primary fileset."
        }
      }
    },
    "NodeNetworkInfo" : {
      "type" : "object",
      "properties" : {
        "adminIPAddress" : {
          "type" : "string",
          "example" : "10.0.200.21",
          "description" : "The IP address used by the GPFS admin network"
        },
        "daemonNodeName" : {
          "type" : "string",
          "example" : "testnode1-d.localnet.com",
          "description" : "The hostname used by the GPFS daemon network"
        },
        "daemonIPAddress" : {
          "type" : "string",
          "example" : "10.0.100.21",
          "description" : "The IP address used by the GPFS daemon network"
        },
        "getcnfsNodeName" : {
          "type" : "string",
          "description" : "The hostname used by cNFS"
        },
        "osHostName" : {
          "type" : "string",
          "example" : "testnode1-os.localnet.com",
          "description" : "The hostname used by the operating system."
        }
      },
      "description" : "Information about the nodes network"
    },
    "NodeClassCreate" : {
      "type" : "object",
      "properties" : {
        "nodeclassName" : {
          "type" : "string",
          "example" : "cesNodes",
          "description" : "The name of the nodeclass"
        },
        "members" : {
          "type" : "array",
          "example" : "['mari-11', 'CloudOne']",
          "description" : "The list of nodes being part of the nodeclass",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Summary information about an user-defined GPFS nodeclass"
    },
    "NsdInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "nsds" : {
          "type" : "array",
          "description" : "The list of the NSDs.",
          "items" : {
            "$ref" : "#/definitions/Disk"
          }
        }
      }
    },
    "RequestStatus" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The HTTP status code that was returned by the request"
        },
        "message" : {
          "type" : "string",
          "example" : "...",
          "description" : "The detailed success/error message"
        }
      }
    },
    "NodeConfig" : {
      "type" : "object",
      "properties" : {
        "adminLoginName" : {
          "type" : "string",
          "example" : "root",
          "description" : "The name of the admin login"
        },
        "designatedLicense" : {
          "type" : "string",
          "example" : "server",
          "description" : "The license this node is running on"
        },
        "requiredLicense" : {
          "type" : "string",
          "example" : "server",
          "description" : "Controls the type of GPFS required license associated with the nodes in the cluster.",
          "enum" : [ "client", "fpo", "server" ]
        },
        "productEdition" : {
          "type" : "string",
          "example" : "IBM Spectrum Scale Advanced Edition",
          "description" : "The product edition this node is running"
        }
      },
      "description" : "Summary information about a Node"
    },
    "Policy" : {
      "type" : "object",
      "properties" : {
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The filesystem context of this policy"
        },
        "policy" : {
          "type" : "string",
          "example" : "RULE 'placement' SET POOL 'system'",
          "description" : "The policy settings"
        }
      },
      "description" : "Detailed information about a policy"
    },
    "SmbShareInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "shares" : {
          "type" : "array",
          "description" : "shares",
          "items" : {
            "$ref" : "#/definitions/SmbShare"
          }
        }
      }
    },
    "ClusterInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "cluster" : {
          "$ref" : "#/definitions/Cluster"
        }
      }
    },
    "AccessRequestResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "token" : {
          "type" : "string",
          "example" : "a9653e24-3a02-41a9-bb50-b63a86a4c3a7",
          "description" : "The request token that was created."
        },
        "clusterName" : {
          "type" : "string",
          "example" : "gss-cluster-5.localnet.com",
          "description" : "The name of the cluster."
        }
      }
    },
    "QuotaDefaultsFsetConfig" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies that default quotas for users are to be activated."
        },
        "group" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies that default quotas for groups are to be activated."
        },
        "assign" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Assigns the default quota limits to/of existing users, groups, or filesets when quota defaults are enabled."
        },
        "reset" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Reset the default quota limits to/of existing users, groups, or filesets when quota defaults are disabled."
        }
      }
    },
    "PolicyCreate" : {
      "type" : "object",
      "properties" : {
        "policy" : {
          "type" : "string",
          "example" : "RULE 'placement' SET POOL 'system'",
          "description" : "The policy settings"
        }
      },
      "description" : "Detailed information about a policy"
    },
    "AfmCtl" : {
      "type" : "object",
      "properties" : {
        "failback" : {
          "$ref" : "#/definitions/Failback"
        },
        "failoverToSecondary" : {
          "$ref" : "#/definitions/FailoverToSecondary"
        },
        "convertToPrimary" : {
          "$ref" : "#/definitions/ConvertToPrimary"
        },
        "convertToSecondary" : {
          "$ref" : "#/definitions/ConvertToSecondary"
        },
        "changeSecondary" : {
          "$ref" : "#/definitions/ChangeSecondary"
        },
        "replacePrimary" : {
          "$ref" : "#/definitions/ReplacePrimary"
        },
        "failbackToPrimary" : {
          "$ref" : "#/definitions/FailbackToPrimary"
        },
        "applyUpdates" : {
          "$ref" : "#/definitions/ApplyUpdates"
        },
        "calledSetterCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "FileOwnerInlineResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "owner" : {
          "description" : "The owner",
          "$ref" : "#/definitions/FileOwner"
        }
      }
    },
    "PDisk" : {
      "type" : "object",
      "properties" : {
        "details" : {
          "$ref" : "#/definitions/PDiskDetails"
        },
        "metrics" : {
          "$ref" : "#/definitions/PDiskMetrics"
        },
        "paths" : {
          "$ref" : "#/definitions/PDiskPaths"
        },
        "name" : {
          "type" : "string",
          "example" : "pdisk1",
          "description" : "The name of the pdisk"
        },
        "declusteredArray" : {
          "type" : "string",
          "example" : "DA1",
          "description" : "The name of the declustered array of the pdisk"
        },
        "recoveryGroup" : {
          "type" : "string",
          "example" : "RG2",
          "description" : "The name of the recovery group of the pdisk"
        },
        "state" : {
          "type" : "string",
          "example" : "NORMAL",
          "description" : "The state of the pdisk"
        },
        "stateInfo" : {
          "type" : "string",
          "example" : "ok",
          "description" : "The state information about the pdisk"
        },
        "healthState" : {
          "type" : "string",
          "example" : "HEALTHY",
          "description" : "The health state of the pdisk"
        },
        "freeSpace" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 533649686528,
          "description" : "The free space of the pdisk in bytes"
        },
        "capacity" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 536602476544,
          "description" : "The capacity of the pdisk in bytes"
        },
        "pathCount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "The number of paths for the pdisk"
        }
      },
      "description" : "Summary information about a physical disk"
    },
    "OwningFilesystemAccess" : {
      "type" : "object",
      "properties" : {
        "access" : {
          "type" : "string",
          "description" : "The access permissions to the owning cluster filesystem"
        }
      },
      "description" : "Access information for a filesystem of the owning cluster. It's just \"rw\" or \"ro\"."
    },
    "QuotaDefaults" : {
      "type" : "object",
      "properties" : {
        "deviceName" : {
          "type" : "string"
        },
        "filesetId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filesetName" : {
          "type" : "string"
        },
        "quotaType" : {
          "type" : "string",
          "enum" : [ "USR", "GRP", "FILESET" ]
        },
        "blockSoftLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "blockHardLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "filesSoftLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "filesHardLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entryType" : {
          "type" : "string",
          "enum" : [ "DEFAULT_ON", "DEFAULT_OFF", "EXPLICIT", "DEFAULT_ED_FS", "DEFAULT_ED_FSET", "INITIAL", "N_A" ]
        },
        "lastUpdate" : {
          "$ref" : "#/definitions/FsccDate"
        },
        "uniqueID" : {
          "type" : "string"
        }
      },
      "description" : "Default settings for either file system (USR, GRP, FSET) or file-set (USR, GRP) related quotas"
    },
    "SmbShare" : {
      "type" : "object",
      "required" : [ "filesystemName", "shareName" ],
      "properties" : {
        "shareName" : {
          "type" : "string",
          "example" : "smbShare",
          "description" : "The name of the SMB share."
        },
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem the share belongs to."
        },
        "filesetName" : {
          "type" : "string",
          "example" : "fset1",
          "description" : "The name of the fileset the share belongs to."
        },
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "Specifies the path for the share."
        },
        "smbOptions" : {
          "$ref" : "#/definitions/SmbOptions"
        }
      },
      "description" : "Summary information about a smb share"
    },
    "JobRequest" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "POST",
          "description" : "HTTP request type (GET, POST, PUT OR DELETE)"
        },
        "url" : {
          "type" : "string",
          "example" : "/scalemgmt/v2/filesystems/gpfs0/filesets",
          "description" : "The URL the job got submitted through"
        },
        "data" : {
          "type" : "object",
          "example" : "{\"config\":{\"filesetName\":\"restfs1001\",\"owner\":\"root\",\"path\":\"/mnt/gpfs0/rest1001\",\"permissions\":\"555\"}",
          "description" : "The data posted when job was submitted",
          "properties" : { }
        }
      }
    },
    "AccessToken" : {
      "type" : "object",
      "properties" : {
        "accessToken" : {
          "type" : "string"
        },
        "lastStatusChange" : {
          "$ref" : "#/definitions/FsccDate"
        },
        "requestingUser" : {
          "type" : "string"
        },
        "authData" : {
          "$ref" : "#/definitions/AuthData"
        }
      }
    },
    "InfoInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "info" : {
          "$ref" : "#/definitions/Info"
        }
      }
    },
    "PDiskMetrics" : {
      "type" : "object",
      "properties" : {
        "reads" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 3484,
          "description" : "The value of 'reads' for the pdisk"
        },
        "writes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 698,
          "description" : "The value of 'writes' for the pdisk"
        },
        "bytesRead" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 546534588,
          "description" : "The read bytes value of the pdisk"
        },
        "bytesWritten" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 612032839,
          "description" : "The written bytes value of the pdisk"
        },
        "ioErrors" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The number of input-output errors for the pdisk"
        },
        "ioTimeOuts" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The number of input-output timeouts for the pdisk"
        },
        "mediaErrors" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The number of media errors for the pdisk"
        },
        "checksumErrors" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The number of checksum errors for the pdisk"
        },
        "pathErrors" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The number of path errors for the pdisk"
        },
        "relativePerformance" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.968,
          "description" : "The relative performance of the pdisk"
        },
        "dataBadness" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.0,
          "description" : "The value of data badness"
        },
        "ssdEndurance" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "The value of SSD endurance"
        }
      },
      "description" : "Information about metrics of a physical disk"
    },
    "FilesetConfig" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/myFset1",
          "description" : "The path where the fileset is linked"
        },
        "inodeSpace" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Inode space"
        },
        "maxNumInodes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4096,
          "description" : "Maximum number of inodes allowed"
        },
        "permissionChangeMode" : {
          "type" : "string",
          "example" : "chmodAndSetAcl",
          "description" : "Specifies the permission change mode.",
          "enum" : [ "chmodOnly", "setAclOnly", "chmodAndSetAcl", "chmodAndUpdateAcl" ]
        },
        "comment" : {
          "type" : "string",
          "example" : "Comment1",
          "description" : "The comment for this fileset"
        },
        "iamMode" : {
          "type" : "string",
          "example" : "off",
          "description" : "Specifies the integrated archive manager (IAM) mode for the fileset.",
          "enum" : [ "compliant-plus", "compliant", "noncompliant", "advisory", "off" ]
        },
        "oid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 158,
          "description" : "Internal identifier of the fileset, used for paging"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 5,
          "description" : "Fileset identifier"
        },
        "status" : {
          "type" : "string",
          "example" : "Linked",
          "description" : "Specifies if the fileset is linked or unlinked",
          "enum" : [ "Linked", "Unlinked" ]
        },
        "parentId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Parent fileset identifier, if not deleted"
        },
        "created" : {
          "type" : "string",
          "example" : "2016-12-13 13.59.15",
          "description" : "Creation time"
        },
        "isInodeSpaceOwner" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if this is an independent fileset (1 = yes, 0 = no)"
        },
        "inodeSpaceMask" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The inode space mask"
        },
        "snapId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Latest including snapshot, if deleted"
        },
        "rootInode" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 131075,
          "description" : "Root inode number, if not deleted"
        }
      },
      "description" : "Object that can be used to change an existing fileset"
    },
    "FilesystemPair" : {
      "type" : "object",
      "properties" : {
        "owningClusterFilesystem" : {
          "type" : "string",
          "description" : "The filesystem on the owning cluster."
        },
        "remoteClusterFilesystem" : {
          "type" : "string",
          "description" : "The filesystem on the remote cluster."
        }
      },
      "description" : "The two filesystem names that are having a remote mount relationship"
    },
    "Job" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "description" : "The result of the operation.",
          "$ref" : "#/definitions/JobResult"
        },
        "request" : {
          "description" : "The original request the job was created for.",
          "$ref" : "#/definitions/JobRequest"
        },
        "jobId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12345,
          "description" : "The unique id of the job"
        },
        "submitted" : {
          "type" : "string",
          "example" : "2016-11-14 10.35.56",
          "description" : "The time when the job was submitted."
        },
        "completed" : {
          "type" : "string",
          "example" : "2016-11-14 10.35.56",
          "description" : "The time when the job was completed."
        },
        "runtime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The runtime in ms."
        },
        "status" : {
          "type" : "string",
          "example" : "COMPLETED",
          "description" : "RUNNING, CANCELLING, CANCELLED, COMPLETED or FAILED",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED" ]
        },
        "pids" : {
          "type" : "array",
          "example" : "20161",
          "description" : "The process ids of all active subprocesses launched to handle this job",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Status of an asynchronous operation"
    },
    "ProtocolState" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "SMB",
          "description" : "The name of the service",
          "enum" : [ "SMB", "OBJ", "NFS" ]
        },
        "enabled" : {
          "type" : "string",
          "example" : "yes",
          "description" : "Determines if the service is enabled or not",
          "enum" : [ "yes", "no" ]
        }
      },
      "description" : "Summary information about a protocol state"
    },
    "FileAuditLogConfigEnable" : {
      "type" : "object",
      "properties" : {
        "auditFilesetDeviceName" : {
          "type" : "string",
          "example" : "logFilesystem",
          "description" : "The name of the filesystem where the filesets resides which contains the audit log records"
        },
        "auditFilesetName" : {
          "type" : "string",
          "example" : "logFileset1",
          "description" : "The name of the fileset where the audit log records are written to"
        },
        "auditRetention" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 365,
          "description" : "Number of days the audit log records are kept"
        },
        "eventTypes" : {
          "type" : "string",
          "example" : "ACLCHANGE,CLOSE,CREATE,DESTROY,GPFSATTRCHANGE,OPEN,RENAME,RMDIR,UNLINK,XATTRCHANGE",
          "description" : "The event types configured for file audit logging"
        }
      }
    },
    "Disk" : {
      "type" : "object",
      "required" : [ "availability", "availableBlocks", "availableFragments", "failureGroup", "fileSystem", "name", "nsdServers", "nsdVolumeId", "quorumDisk", "remarks", "size", "status", "storagePool", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "disk8",
          "description" : "The name of the disk."
        },
        "fileSystem" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The device name of the file system to which the disks belong. "
        },
        "failureGroup" : {
          "type" : "string",
          "example" : "1",
          "description" : "The id of the Failure group."
        },
        "type" : {
          "type" : "string",
          "example" : "dataOnly",
          "description" : "The type of the disk."
        },
        "storagePool" : {
          "type" : "string",
          "example" : "data",
          "description" : "The name of the pool."
        },
        "status" : {
          "type" : "string",
          "example" : "ready",
          "description" : "The status of the disk."
        },
        "availability" : {
          "type" : "string",
          "example" : "up",
          "description" : "The availability of the disk."
        },
        "quorumDisk" : {
          "type" : "boolean",
          "example" : false,
          "description" : "The quorum status of the disk."
        },
        "remarks" : {
          "type" : "string",
          "example" : "This is a comment",
          "description" : "The comment of the disk."
        },
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10737418240,
          "description" : "The size of the disk in Bytes."
        },
        "availableBlocks" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 737418240,
          "description" : "The available blocks of the disk in Bytes."
        },
        "availableFragments" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1536000,
          "description" : "The available fragments of the disk in Bytes."
        },
        "nsdServers" : {
          "type" : "string",
          "example" : "gpfsgui-21.localnet.com",
          "description" : "The name of the NSD servers."
        },
        "nsdVolumeId" : {
          "type" : "string",
          "example" : "0A0064155874F5AA",
          "description" : "The volume id of the NSD."
        }
      },
      "description" : "Summary information about a disk/nsd"
    },
    "AuthData" : {
      "type" : "object",
      "properties" : {
        "authData" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          }
        },
        "authDataType" : {
          "type" : "string",
          "enum" : [ "GUI", "USER" ]
        }
      }
    },
    "NfsExport" : {
      "type" : "object",
      "required" : [ "filesystemName" ],
      "properties" : {
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem the export belongs to."
        },
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "Specifies the path for the export."
        },
        "delegations" : {
          "type" : "string",
          "example" : "NONE",
          "description" : "This option specifies what delegate file operations to the accessing to the client."
        },
        "pseudoPath" : {
          "type" : "string",
          "example" : "/mnt/test/",
          "description" : "Specifies the path name the NFSv4 client uses to locate the directory in the server's file system tree."
        },
        "nfsClients" : {
          "type" : "array",
          "description" : "The list of the clients configurations for the the specified export.",
          "items" : {
            "$ref" : "#/definitions/NfsClient"
          }
        }
      },
      "description" : "Summary information about a nfs export"
    },
    "NodeClassInlineResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "nodeClasses" : {
          "type" : "array",
          "description" : "nodeclasses",
          "items" : {
            "$ref" : "#/definitions/NodeClass"
          }
        }
      }
    },
    "NfsV4Entry" : {
      "type" : "object",
      "required" : [ "permissions", "type", "who" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "allow",
          "description" : "Type of the entry",
          "enum" : [ "allow", "deny", "alarm", "audit" ]
        },
        "who" : {
          "type" : "string",
          "example" : "user:testuser",
          "description" : "The user/group this entry will control access for (e.g. special:owner@,special:group@,special:everyone@,user:{name},group:{name}"
        },
        "permissions" : {
          "type" : "string",
          "example" : "rxancs",
          "description" : "The permission bits (r)ead,(w)rite,(m)kdir,e(x)ecute,(d)elete,(D)elete child,read (a)ttr, write (A)ttr, read (n)amed, write (N)amed, read a(c)l, write a(C)l, change (o)wner, (s)ynchronize"
        },
        "flags" : {
          "type" : "string",
          "example" : "fd",
          "description" : "The special flags of the entry [(f)ile inherit, (d)ir inherit, (i)nherit only, (I)nherited, (S)uccessful access, (F)ailed access]"
        }
      },
      "description" : "Individual entry of a NFSv4 access control list"
    },
    "VDiskInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "vdisks" : {
          "type" : "array",
          "description" : "The list of the virtual disks.",
          "items" : {
            "$ref" : "#/definitions/VDisk"
          }
        }
      }
    },
    "Paging" : {
      "type" : "object",
      "properties" : {
        "next" : {
          "type" : "string",
          "example" : "https://localhost:443/scalemgmt/v2/filesystems/gpfs0/filesets?lastId=10001",
          "description" : "The URL to retrieve the next page. Paging is enabled when more than 1000 objects would be returned by the query"
        },
        "fields" : {
          "type" : "string",
          "example" : "period,restrict,sensorName",
          "description" : "The fields used in the original request"
        },
        "filter" : {
          "type" : "string",
          "example" : "usedInodes>100,maxInodes>1024",
          "description" : "The filter used in the original request"
        },
        "baseUrl" : {
          "type" : "string",
          "example" : "/scalemgmt/v2/perfmon/sensor/config",
          "description" : "The URL of the request without any parameters."
        },
        "lastId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10001,
          "description" : "The id of the last element that can be used to retrieve the next elements"
        }
      },
      "description" : "Details about paging"
    },
    "ChangeSecondary" : {
      "type" : "object",
      "required" : [ "newTarget" ],
      "properties" : {
        "newTarget" : {
          "type" : "string",
          "example" : "nfs://9.11.102.209/gpfs/fs0/nfs-ganesha1",
          "description" : "Specifies a new home server and path, replacing the home server and path originally set"
        },
        "inband" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Used for inband trucking. Copies data to a new empty secondary. If you have already copied data to the secondary site, mtime of files at the primary and secondary site is checked. Here, granularity of mtime is in microseconds. If mtime values of both files match, data is not copied again and existing data on the secondary site is used. If mtime values of both files do not match, existing data on the secondary site is discarded and data from the primary site is written to the secondary site."
        },
        "targetOnly" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Used when you want to change the IP address or NFS server name for the same target path. The new NFS server must be in the same home cluster and must be of the same architecture(power or x86) as the existing NFS server in the target path. This option can be used to move from NFS to a mapping target."
        }
      }
    },
    "MountConfiguration" : {
      "type" : "object",
      "properties" : {
        "nodes" : {
          "type" : "array",
          "example" : "testnode-11",
          "description" : "List of nodes or nodeclasses.",
          "items" : {
            "type" : "string"
          }
        },
        "mountOptions" : {
          "type" : "string",
          "example" : "atime=yes;relatime=no",
          "description" : "Additional mount options which override the defaults and are not persistent."
        }
      },
      "description" : "Summary information about an configuration for the filesystem mount operation"
    },
    "SmbOptions" : {
      "type" : "object",
      "properties" : {
        "browseable" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, the export is shown in the Windows Explorer browser when browsing the file server. ",
          "enum" : [ "yes", "no" ]
        },
        "smbEncrypt" : {
          "type" : "string",
          "example" : "auto",
          "description" : "This option controls whether the remote client is allowed or required to use SMB encryption. Possible values are auto (or default), mandatory, disabled and desired. Clients may chose to encrypt the entire session, not just traffic to a specific export. ",
          "enum" : [ "auto", "default", "mandatory", "disabled", "desired" ]
        },
        "adminUsers" : {
          "type" : "string",
          "example" : "admin",
          "description" : "Using this option, administrative users can be defined in the format of admin users=user1;user2;..;usern. The users must be domain users."
        },
        "comment" : {
          "type" : "string",
          "example" : "This is a comment",
          "description" : "A free text description of the export."
        },
        "cscPolicy" : {
          "type" : "string",
          "example" : "manual",
          "description" : "csc policy stands for client-side caching policy, and specifies how clients capable of offline caching will cache the files in the share.",
          "enum" : [ "manual", "disable", "documents", "programs" ]
        },
        "fileIdAlgorithm" : {
          "type" : "string",
          "example" : "fsname",
          "description" : "This option allows to control the level of enforced data integrity. If the data integrity is ensured on the application level, it can be beneficial in cluster environments to reduce the level of enforced integrity for performance reasons.",
          "enum" : [ "fsname", "hostname", "fsnamenodirs", "fsnamenorootdir" ]
        },
        "gpfsLeases" : {
          "type" : "string",
          "example" : "yes",
          "description" : "gpfs:leases are cross protocol opLocks (opportunistic locks), that means an SMB client can lock a file that provides the user improved performance while reading or writing to the file because no other user read or write to this file. If the value is set as yes, clients accessing the file over the other protocols can break the lock of a SMB client and the user gets informed when another user is accessing the same file at the same time.",
          "enum" : [ "yes", "no" ]
        },
        "gpfsRecalls" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes files that have been migrated from disk will be recalled on access. If recalls = no files will not be recalled on access and the client will receive ",
          "enum" : [ "yes", "no" ]
        },
        "gpfsShareModes" : {
          "type" : "string",
          "example" : "yes",
          "description" : "An application can set share modes. If you set gpfs:sharemodes = yes, the sharemodes specified by the application will be respected by all protocols and not only by the SMB protocol. If you set gpfs:sharemodes = no the sharemodes specified by the application will only be respected by the SMB protocol. ",
          "enum" : [ "yes", "no" ]
        },
        "gpfsSyncIo" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, it specifies the files in an export, for which the setting is enabled, are opened with the OSYNC flag. Accessing a file is faster if gpfs:syncio is set to yes. Performance for certain workloads can be improved when SMB accesses the file with the OSYNC flag set. For example, updating only small blocks in a large file as observed with database applications. The underlying GPFS behavior is then changed to not read a complete block if there is only a small update to it. ",
          "enum" : [ "yes", "no" ]
        },
        "hideUnreadable" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, all files and directories that the user has no permission to read is hidden from directory listings in the export. The hideUnreadable=yes option is also known as access−based enumeration because when a user is listing (enumerating) the directories and files within the export, they only see the files and directories that they have read access to. ",
          "enum" : [ "yes", "no" ]
        },
        "opLocks" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, a client may request an opportunistic lock (oplock) from an SMB server when it opens a file. If the server grants the request, the client can cache large chunks of the file without informing the server what it is doing with the cached chunks until the task is completed. Caching large chunks of a file saves a lot of network I/O round−trip time and enhances performance. ",
          "enum" : [ "yes", "no" ]
        },
        "posixLocking" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, it will be tested if a byte−range (fcntl) lock is already present on the requested portion of the file before granting a byte−range lock to an SMB client. For improved performance on SMB−only shares this option can be disabled. Disabling locking on cross−protocol shares can result in data integrity issues when clients concurrently set locks on a file via multiple protocols, for example, SMB and NFS.",
          "enum" : [ "yes", "no" ]
        },
        "readOnly" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set as yes, files cannot be modified or created on this export independent of the ACLs.",
          "enum" : [ "yes", "no" ]
        },
        "syncOpsOnClose" : {
          "type" : "string",
          "example" : "yes",
          "description" : "This option ensures that the file system synchronizes data to the disk each time a file is closed after writing. The written data is flushed to the disk.",
          "enum" : [ "yes", "no" ]
        },
        "hideDotFiles" : {
          "type" : "string",
          "example" : "yes",
          "description" : "If the value is set to yes, files starting with \".\" are hidden.",
          "enum" : [ "yes", "no" ]
        }
      }
    },
    "FilesystemBlock" : {
      "type" : "object",
      "properties" : {
        "pools" : {
          "type" : "string",
          "example" : "system;data",
          "description" : "List of pools of this filesystem"
        },
        "disks" : {
          "type" : "string",
          "example" : "disk1;disk2",
          "description" : "List of disks used by this filesystem"
        },
        "blockSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 262144,
          "description" : "Block size"
        },
        "metaDataBlockSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 262144,
          "description" : "Block size of meta data pool"
        },
        "indirectBlockSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 16384,
          "description" : "Indirect block size in bytes"
        },
        "minFragmentSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 8192,
          "description" : "Minimum fragment size in bytes"
        },
        "inodeSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4096,
          "description" : "Inode size in bytes"
        },
        "logfileSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4194304,
          "description" : "The size of the internal log files in Bytes"
        },
        "writeCacheThreshold" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Specifies the maximum length (in bytes) of write requests that will be initially buffered in the highly-available write cache before being written back to primary storage."
        }
      }
    },
    "CnfsSummary" : {
      "type" : "object",
      "properties" : {
        "cnfsSharedRoot" : {
          "type" : "string",
          "example" : "/mnt/objfs",
          "description" : "The shared path where the cnfs stores internal state"
        },
        "cnfsMountdPort" : {
          "type" : "string",
          "example" : "111",
          "description" : "The tcp port used by the mount daemon"
        },
        "cnfsNFSDprocs" : {
          "type" : "string",
          "example" : "32",
          "description" : "The number of NFS kernel processes"
        },
        "cnfsReboot" : {
          "type" : "string",
          "example" : "yes",
          "description" : "Specified if node will reboot if monitoring detects an unrecoverable problem"
        },
        "cnfsMonitorEnabled" : {
          "type" : "string",
          "example" : "yes",
          "description" : "Specifies if cnfs monitoring is enabled"
        },
        "cnfsGanesha" : {
          "type" : "string",
          "example" : "192.168.0.1",
          "description" : "The IP of the Ganesha NFS server"
        }
      },
      "description" : "Summary information about cNFS"
    },
    "Row" : {
      "type" : "object",
      "properties" : {
        "nsamples" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "tstamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "values" : {
          "type" : "array",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    },
    "ProtocolNode" : {
      "type" : "object",
      "properties" : {
        "nodeName" : {
          "type" : "string",
          "example" : "testnode-1.localnet.com",
          "description" : "The name of the node"
        },
        "serviceStates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceState"
          }
        }
      },
      "description" : "Summary information about a protocol node"
    },
    "Domain" : {
      "type" : "object",
      "properties" : {
        "bucketSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "domainID" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end" : {
          "type" : "integer",
          "format" : "int64"
        },
        "start" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CESNodeInfo" : {
      "type" : "object",
      "properties" : {
        "cesState" : {
          "type" : "string",
          "example" : "e",
          "description" : "The state of the service"
        },
        "cesGroup" : {
          "type" : "string",
          "example" : "LAN_4",
          "description" : "The CES group this node and address belongs to"
        },
        "cesIpList" : {
          "type" : "string",
          "example" : "192.168.2.11,192.168.2.13,192.168.2.15",
          "description" : "A list of CES IP addresses assigned to this node"
        },
        "ipAddress" : {
          "type" : "string",
          "example" : "10.0.100.23",
          "description" : "The actual IP address of this node"
        }
      },
      "description" : "Information about a CES node"
    },
    "Http500InternalServerError" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 500,
          "description" : "The HTTP status code that was returned by the request"
        },
        "message" : {
          "type" : "string",
          "example" : "...",
          "description" : "The detailed success/error message"
        }
      }
    },
    "NodeStatus" : {
      "type" : "object",
      "properties" : {
        "osName" : {
          "type" : "string",
          "example" : "Red Hat Enterprise Linux Server 7.2 (Maipo)",
          "description" : "The name of Operating System running on this node"
        },
        "nodeState" : {
          "type" : "string",
          "example" : "HEALTHY",
          "description" : "The state of the node as reported by 'mmhealth node show'"
        },
        "gpfsState" : {
          "type" : "string",
          "example" : "HEALTHY",
          "description" : "The state of GPFS on this node as reported by 'mmhealth node show'"
        },
        "productVersion" : {
          "type" : "string",
          "example" : "4.2.3.0",
          "description" : "The GPFS version installed on this node"
        }
      },
      "description" : "Summary information about a Node"
    },
    "SystemHealthEvent" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12345,
          "description" : "The internal unique id of the event."
        },
        "component" : {
          "type" : "string",
          "example" : "GPFS",
          "description" : "The component the event belongs to."
        },
        "reportingNode" : {
          "type" : "string",
          "example" : "testnode1.localnet.com",
          "description" : "The name of the node where this event occurred."
        },
        "type" : {
          "type" : "string",
          "example" : "STATE_CHANGE",
          "description" : "The event type",
          "enum" : [ "TIP", "STATE_CHANGE", "NOTICE" ]
        },
        "activeSince" : {
          "type" : "string",
          "example" : "02.02.2017 11:23:59.157",
          "description" : "The time the event occurred."
        },
        "name" : {
          "type" : "string",
          "example" : "inode_normal",
          "description" : "The name of the event."
        },
        "message" : {
          "type" : "string",
          "example" : "The inode usage of fileset fset1 in file system gpfs0 reached a normal level.",
          "description" : "The message of the event."
        },
        "entityType" : {
          "type" : "string",
          "example" : "FILESET",
          "description" : "The type of the entity the event occurred for."
        },
        "entityName" : {
          "type" : "string",
          "example" : "gpfs0/fset1",
          "description" : "The name of the entity the event occurred for. (parent/child)"
        },
        "userAction" : {
          "type" : "string",
          "example" : "N/A",
          "description" : "The action the user can perform to resolve the event."
        },
        "description" : {
          "type" : "string",
          "example" : "The inode usage in the fileset reached a normal level.",
          "description" : "The description of the event."
        },
        "state" : {
          "type" : "string",
          "example" : "HEALTHY",
          "description" : "The state the event leads to."
        },
        "severity" : {
          "type" : "string",
          "example" : "INFO",
          "description" : "The severity of the event."
        },
        "parentName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the parent this event belongs to."
        },
        "parentAndEntityName" : {
          "type" : "string"
        }
      },
      "description" : "Summary information about a System Health event"
    },
    "AccessControlList" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "NFSv4",
          "description" : "Type of ACL"
        },
        "entries" : {
          "type" : "array",
          "description" : "The access control entries",
          "items" : {
            "$ref" : "#/definitions/NfsV4Entry"
          }
        }
      },
      "description" : "Access Control List of a file or directory"
    },
    "RemoteFilesystemCreate" : {
      "type" : "object",
      "properties" : {
        "remoteFilesystem" : {
          "type" : "string",
          "description" : "The name of the filesystem on the remote cluster"
        },
        "owningFilesystem" : {
          "type" : "string",
          "description" : "The name of the filesystem on the owning cluster"
        },
        "owningCluster" : {
          "type" : "string",
          "description" : "The owning cluster of the remote filesystem"
        },
        "remoteMountPath" : {
          "type" : "string",
          "description" : "The remote mount path of the remote filesystem"
        },
        "mountOptions" : {
          "type" : "string",
          "description" : "The mount options of the remote filesystem"
        },
        "automount" : {
          "type" : "string",
          "description" : "The automount status of the remote filesystem"
        },
        "mountOnNodes" : {
          "type" : "string",
          "description" : "Nodes where to mount the new remote filesystem, can also be node classes"
        }
      },
      "description" : "Summary information about creating a remote filesystem"
    },
    "Config" : {
      "type" : "object",
      "properties" : {
        "clusterConfig" : {
          "type" : "object",
          "description" : "The cluster configuration as shown by mmlsconfig -Y",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "nodeConfig" : {
          "type" : "array",
          "description" : "The configuration of node(s) as shown by mmlsconfig -Y",
          "items" : {
            "$ref" : "#/definitions/NodeConfig"
          }
        }
      },
      "description" : "Summary information about a cluster config"
    },
    "NodeRoles" : {
      "type" : "object",
      "properties" : {
        "snmpNode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if this node is a SNMP node"
        },
        "managerNode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if this node is a manager node"
        },
        "gatewayNode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if this node is a gateway node"
        },
        "cnfsNode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if this node is a cNFS node"
        },
        "clientNode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if this node is a client node"
        },
        "cesNode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if this node is a CES node"
        },
        "quorumNode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if this node is a quorum node"
        },
        "cloudGatewayNode" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies if this node is a cloud gateway node"
        },
        "otherNodeRoles" : {
          "type" : "string",
          "example" : "perfmonNode,cesNode",
          "description" : "Other roles of this node"
        },
        "designation" : {
          "type" : "string",
          "example" : "quorum",
          "description" : "The nodes designation",
          "enum" : [ "quorum", "quorumManager", "manager" ]
        }
      },
      "description" : "Information about the nodes roles"
    },
    "PerformanceData" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/Header"
        },
        "legend" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Legend"
          }
        },
        "rangeData" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RangeData"
          }
        },
        "rows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Row"
          }
        }
      }
    },
    "AccessRequestData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "USER",
          "description" : "Specifies the type of the access request"
        },
        "clusterName" : {
          "type" : "string",
          "example" : "gss-cluster-5.localnet.com",
          "description" : "The name of the cluster from which the request is coming"
        },
        "requestingUser" : {
          "type" : "string",
          "example" : "admin",
          "description" : "The name of the user from which the request is coming"
        },
        "accessToken" : {
          "type" : "string"
        },
        "authData" : {
          "type" : "object",
          "example" : "{ \"userName\" : \"alice\", \"roles\": { \"monitor\" : \"PENDING\",\"admin\" : \"PENDING\" } }",
          "description" : "Additional authentication data depending on the type of the request",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          }
        }
      }
    },
    "FilesetLink" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "The path this fileset will be linked to"
        }
      },
      "description" : "Object that can be used to link an existing fileset"
    },
    "FilesetAfmHostMapping" : {
      "type" : "object",
      "properties" : {
        "home" : {
          "type" : "string",
          "example" : "10.0.100.13",
          "description" : "The node of the home site of the AFM host map"
        },
        "cache" : {
          "type" : "string",
          "example" : "cache-41",
          "description" : "The node of the cache site of the AFM host map"
        }
      }
    },
    "SymlinkPath" : {
      "type" : "object",
      "required" : [ "filesystemName" ],
      "properties" : {
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem the path belongs to."
        },
        "filesetName" : {
          "type" : "string",
          "example" : "fset1",
          "description" : "The name of the fileset the path belongs to."
        },
        "relativePath" : {
          "type" : "string",
          "example" : "mydir",
          "description" : "The directory path relative to the filesystem's mount point or to the fileset path (if specified). "
        }
      },
      "description" : "Summary information about a path"
    },
    "VDisk" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "disk1",
          "description" : "The name of the vdisk"
        },
        "recoveryGroup" : {
          "type" : "string",
          "example" : "RG1",
          "description" : "The name of the recovery group"
        },
        "declusteredArray" : {
          "type" : "string",
          "example" : "DA1",
          "description" : "The name of the declustered array"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 262144,
          "description" : "The size of the vdisk"
        },
        "raidCode" : {
          "type" : "string",
          "example" : "2WayReplication",
          "description" : "The code of the raid"
        },
        "trackSize" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 262144,
          "description" : "The size of the track"
        },
        "checksumGranularity" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 32768,
          "description" : "The granularity of the checksum"
        },
        "remarks" : {
          "type" : "string",
          "example" : "logTip",
          "description" : "The remarks of the vdisk"
        },
        "state" : {
          "type" : "string",
          "example" : "ok",
          "description" : "The state of the vdisk"
        },
        "health" : {
          "type" : "string",
          "example" : "UNKNOWN",
          "description" : "The healthState status of the vdisk"
        }
      },
      "description" : "Detailed information about a vdisk configuration"
    },
    "NfsExportInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "exports" : {
          "type" : "array",
          "description" : "The list of the nfs exports.",
          "items" : {
            "$ref" : "#/definitions/NfsExport"
          }
        }
      }
    },
    "Http503ServiceUnavailable" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 503,
          "description" : "The HTTP status code that was returned by the request"
        },
        "message" : {
          "type" : "string",
          "example" : "...",
          "description" : "The detailed success/error message"
        }
      }
    },
    "NodeClass" : {
      "type" : "object",
      "properties" : {
        "nodeclassName" : {
          "type" : "string",
          "example" : "cesNodes",
          "description" : "The name of the nodeclass"
        },
        "memberClasses" : {
          "type" : "array",
          "example" : "[cloudOne]",
          "description" : "The list of nodeclasses being part of the nodeclass",
          "items" : {
            "type" : "string"
          }
        },
        "memberNodes" : {
          "type" : "array",
          "example" : "[mari-12.localnet.com,mari-13.localnet.com]",
          "description" : "The list of nodes being part of the nodeclass",
          "items" : {
            "type" : "string"
          }
        },
        "allMembers" : {
          "type" : "array",
          "example" : "[mari-12.localnet.com,mari-13.localnet.com]",
          "description" : "The list of all nodes being part of the nodeclass",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "example" : "SYSTEM",
          "description" : "The type of the nodeclass. Either SYSTEM or USER."
        }
      },
      "description" : "Summary information about a Nodeclass"
    },
    "RemoteClusterCreateUpdate" : {
      "type" : "object",
      "properties" : {
        "remoteCluster" : {
          "type" : "string",
          "description" : "The cluster that remotely mounts the filesystems of the owning cluster"
        },
        "ciphers" : {
          "type" : "array",
          "example" : "[ 'AES128-SHA', 'AES256-SHA' ]",
          "description" : "The ciphers of the public key of the remote cluster. Or one of DEFAULT, EMPTY or AUTHONLY.",
          "items" : {
            "type" : "string"
          }
        },
        "key" : {
          "type" : "array",
          "description" : "The public RSA key of the remote cluster",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Information used to create or update a cluster that remotely mounts filesystems of a cluster that owns the filesytems"
    },
    "CliAuditLogRecord" : {
      "type" : "object",
      "properties" : {
        "arguments" : {
          "type" : "string",
          "example" : "-A yes -D nfs4 -k nfs4",
          "description" : "Arguments of a GPFS command"
        },
        "command" : {
          "type" : "string",
          "example" : "mmchfs",
          "description" : "Name of a GPFS command"
        },
        "node" : {
          "type" : "string",
          "example" : "testnode-11",
          "description" : "Name of the node where a GPFS command was running"
        },
        "returnCode" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Return Code of a GPFS command"
        },
        "originator" : {
          "type" : "string",
          "example" : "GUI",
          "description" : "Originator of a GPFS command"
        },
        "user" : {
          "type" : "string",
          "example" : "root",
          "description" : "User triggered a GPFS command"
        },
        "pid" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7891,
          "description" : "PID of a GPFS command"
        },
        "entryTime" : {
          "type" : "string",
          "example" : "2017-07-30 14:00:00",
          "description" : "Entry Time of a GPFS command"
        },
        "exitTime" : {
          "type" : "string",
          "example" : "2017-07-31 18:00:00",
          "description" : "Exit Time of a GPFS command"
        }
      },
      "description" : "Summary information about a CLI audit record"
    },
    "SensorConfigInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "sensorConfig" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SensorConfig"
          }
        }
      }
    },
    "FilesetUsage" : {
      "type" : "object",
      "properties" : {
        "usedInodes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1000,
          "description" : "Specifies the used inodes for this fileset"
        },
        "allocatedInodes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 65856,
          "description" : "Specifies the allocated inodes for this fileset"
        },
        "usedBytes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 134217728,
          "description" : "Specifies the used bytes for this fileset"
        },
        "inodeSpaceUsedInodes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1100,
          "description" : "Specifies the used inodes for this fileset"
        },
        "inodeSpaceFreeInodes" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 55856,
          "description" : "Specifies the free inodes for this fileset"
        }
      },
      "description" : "Summary information about a fileset usage"
    },
    "ACLInlineResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "acl" : {
          "description" : "The Access Control List",
          "$ref" : "#/definitions/AccessControlList"
        }
      }
    },
    "FsccDate" : {
      "type" : "object",
      "properties" : {
        "date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dayAsString" : {
          "type" : "string"
        },
        "monthAsString" : {
          "type" : "string"
        },
        "fsccDate" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timeAsAmericanString" : {
          "type" : "string"
        },
        "isoDateTimeString" : {
          "type" : "string"
        },
        "isoDateTimeMillisString" : {
          "type" : "string"
        },
        "usDateTimeString" : {
          "type" : "string"
        },
        "hourMinSecAsString" : {
          "type" : "string"
        },
        "timeAsString" : {
          "type" : "string"
        },
        "dateAsEnglishString" : {
          "type" : "string"
        },
        "isodateAsString" : {
          "type" : "string"
        },
        "dateForCnbackup" : {
          "type" : "string"
        },
        "yearAsString" : {
          "type" : "string"
        },
        "null" : {
          "type" : "boolean"
        },
        "singleton" : {
          "type" : "boolean"
        }
      }
    },
    "Filesystem" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 2,
          "description" : "Internal identifier used for paging"
        },
        "uuid" : {
          "type" : "string",
          "example" : "0A00641F:58982753",
          "description" : "The UUID of the filesystem"
        },
        "name" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem"
        },
        "version" : {
          "type" : "string",
          "example" : "17.00",
          "description" : "File system version"
        },
        "type" : {
          "type" : "string",
          "example" : "local",
          "description" : "Filesystem type, either 'local' or 'remote'"
        },
        "createTime" : {
          "type" : "string",
          "example" : "Mon Feb 06 08:35:47 2017",
          "description" : "File system creation time"
        },
        "block" : {
          "$ref" : "#/definitions/FilesystemBlock"
        },
        "mount" : {
          "$ref" : "#/definitions/FilesystemMount"
        },
        "replication" : {
          "$ref" : "#/definitions/FilesystemReplication"
        },
        "quota" : {
          "$ref" : "#/definitions/FilesystemQuota"
        },
        "settings" : {
          "$ref" : "#/definitions/FilesystemSettings"
        },
        "fileAuditLogConfig" : {
          "$ref" : "#/definitions/FileAuditLogConfig"
        }
      },
      "description" : "Detailed information about a cluster filesystem"
    },
    "QuotaCreate" : {
      "type" : "object",
      "required" : [ "operationType" ],
      "properties" : {
        "operationType" : {
          "type" : "string",
          "example" : "setQuota",
          "description" : "setQuota , setDefaultQuota or setGracePeriod. For set(Default)Quota specify at least one of the *Limit properties. For setGracePeriod specify the *Period properties."
        },
        "quotaType" : {
          "type" : "string",
          "example" : "USR",
          "description" : "The quota type",
          "enum" : [ "USR", "GRP", "FILESET" ]
        },
        "objectName" : {
          "type" : "string",
          "example" : "adam",
          "description" : "user name, group name or fileset name"
        },
        "blockSoftLimit" : {
          "type" : "string",
          "example" : "1M",
          "description" : "Specifies the amount of data the fileset will be allowed to use. unit defaults to 1K. it is optional to specify unit (K,M,G,T)."
        },
        "blockHardLimit" : {
          "type" : "string",
          "example" : "2M",
          "description" : "Specifies the amount of data the fileset will be allowed to use during a grace period. If omitted, the default is no limit. unit defaults to 1K. it is optional to specify unit (K,M,G,T)."
        },
        "filesSoftLimit" : {
          "type" : "string",
          "example" : "1K",
          "description" : "Specifies the number of files the fileset will be allowed to use. unit defaults to 1. it is optional to specify unit (K,M,G)."
        },
        "filesHardLimit" : {
          "type" : "string",
          "example" : "2K",
          "description" : "Specifies the number of files the fileset will be allowed to use during a grace period. If omitted, the default is no limit. unit defaults to 1. it is optional to specify unit (K,M,G)."
        },
        "filesGracePeriod" : {
          "type" : "string",
          "example" : "1hour",
          "description" : "Specifies the file-system grace period during which the files quota can exceed the soft limit before it is imposed as a hard limit. The period can be specified in days, hours, minutes, or seconds."
        },
        "blockGracePeriod" : {
          "type" : "string",
          "example" : "2days",
          "description" : "Specifies the file-system grace period during which the files quota can exceed the soft limit before it is imposed as a hard limit. The period can be specified in days, hours, minutes, or seconds."
        }
      },
      "description" : "Detailed information about a quota"
    },
    "FilesystemMount" : {
      "type" : "object",
      "properties" : {
        "mountPoint" : {
          "type" : "string",
          "example" : "/mnt/gpfs0",
          "description" : "Default mount point"
        },
        "automaticMountOption" : {
          "type" : "string",
          "example" : "yes",
          "description" : " Indicates when the file system is to be mounted: 'yes' when GPFS daemon starts, 'no' manually, 'automount' when fs is first accessed."
        },
        "additionalMountOptions" : {
          "type" : "string",
          "example" : "none",
          "description" : "The mount options to pass to the mount command when mounting the file system"
        },
        "mountPriority" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Controls the order in which the individual file systems are mounted at daemon startup or when one of the all keywords is specified on the mmmount command."
        },
        "driveLetter" : {
          "type" : "string",
          "example" : "F",
          "description" : "Drive letter when mounted on Windows nodes."
        },
        "remoteDeviceName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "Device name on the owning cluster of this cross-cluster mounted fs."
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Read-only filesystem (in cross-cluster mount)"
        },
        "nodesMountedReadWrite" : {
          "type" : "array",
          "example" : "testnode-1",
          "description" : "Node(s) where the filesystem is mounted with read-write mode",
          "items" : {
            "type" : "string"
          }
        },
        "nodesMountedReadOnly" : {
          "type" : "array",
          "example" : "testnode-2",
          "description" : "Node(s) where the filesystem is mounted with read only mode",
          "items" : {
            "type" : "string"
          }
        },
        "nodesMountedInternally" : {
          "type" : "array",
          "example" : "testnode-3",
          "description" : "Node(s) where the filesystem is mounted internally",
          "items" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "string",
          "example" : "mounted",
          "description" : "Mount status for the GUI node"
        }
      }
    },
    "FilesetChange" : {
      "type" : "object",
      "properties" : {
        "newFilesetName" : {
          "type" : "string",
          "example" : "newFset1",
          "description" : "The new name of the fileset that is changed"
        },
        "maxNumInodes" : {
          "type" : "string",
          "example" : "100M",
          "description" : "Specifies the new maximum number of inodes allowed for this fileset"
        },
        "allocInodes" : {
          "type" : "string",
          "example" : "5M",
          "description" : "Specifies the new number of pre-allocated inodes for this fileset"
        },
        "permissionChangeMode" : {
          "type" : "string",
          "example" : "chmodAndSetAcl",
          "description" : "Specifies the permission change mode.",
          "enum" : [ "chmodOnly", "setAclOnly", "chmodAndSetAcl", "chmodAndUpdateAcl" ]
        },
        "comment" : {
          "type" : "string",
          "example" : "New comment",
          "description" : "The new comment for this fileset"
        },
        "iamMode" : {
          "type" : "string",
          "example" : "compliant",
          "description" : "Specifies the integrated archive manager (IAM) mode for the fileset.",
          "enum" : [ "compliant", "noncompliant", "advisory" ]
        },
        "afmTarget" : {
          "type" : "string",
          "example" : "nfs://10.0.100.11/gpfs/afmHomeFs/afmHomeFileset2",
          "description" : "Identifies the home that is associated with the cache"
        },
        "afmAsyncDelay" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies (in seconds) the amount of time by which write operations are delayed"
        },
        "afmDirLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmDirOpenRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Controls the frequency of data revalidations that are triggered by such I/O operations as read or write (specified in seconds)"
        },
        "afmEnableAutoEviction" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies if eviction is enabled"
        },
        "afmExpirationTimeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Is used with afmDisconnectTimeout (which can be set only through mmchconfig) to control how long a network outage between the cache and home clusters can continue before the data in the cache is considered out of sync with home."
        },
        "afmFileLookupRefreshInterval" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 30,
          "description" : "Controls the frequency of data revalidations that are triggered by such lookup operations as ls or stat (specified in seconds)"
        },
        "afmMode" : {
          "type" : "string",
          "example" : "read-only",
          "description" : "Specifies the mode in which the cache operates",
          "enum" : [ "single-writer", "read-only", "local-updates", "independent-writer", "Primary", "Secondary" ]
        },
        "afmNumFlushThreads" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "Defines the number of threads used on each gateway to synchronize updates to the home cluster"
        },
        "afmParallelReadChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 134217728,
          "description" : "Defines the minimum chunk size of the read that needs to be distributed among the gateway nodes during parallel reads"
        },
        "afmParallelReadThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1024,
          "description" : "Defines the threshold beyond which parallel reads become effective"
        },
        "afmParallelWriteChunkSize" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the minimum chunk size of the write that needs to be distributed among the gateway nodes during parallel writes"
        },
        "afmParallelWriteThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Defines the threshold beyond which parallel writes become effective"
        },
        "afmPrefetchThreshold" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Controls partial file caching and prefetching"
        },
        "afmPrimaryID" : {
          "type" : "string",
          "description" : "Specifies the unique primary ID of the primary fileset for asynchronous data replication"
        },
        "afmRPO" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the recovery point objective (RPO) interval in minutes for a primary fileset"
        },
        "afmShowHomeSnapshots" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Controls the visibility of the home snapshot directory in cache"
        }
      },
      "description" : "Object that can be used to update an existing fileset"
    },
    "PolicyInlineResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "policies" : {
          "type" : "array",
          "description" : "policies",
          "items" : {
            "$ref" : "#/definitions/Policy"
          }
        }
      }
    },
    "RemoteClusterInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "remoteClusters" : {
          "type" : "array",
          "description" : "remoteClusters",
          "items" : {
            "$ref" : "#/definitions/RemoteCluster"
          }
        }
      }
    },
    "RemoteCluster" : {
      "type" : "object",
      "properties" : {
        "remoteCluster" : {
          "type" : "string",
          "description" : "The cluster that remotely mounts the filesystems of the owning cluster"
        },
        "ciphers" : {
          "type" : "array",
          "example" : "[ 'AES128-SHA', 'AES256-SHA' ]",
          "description" : "The ciphers of the public key of the remote cluster. Or one of DEFAULT, EMPTY or AUTHONLY.",
          "items" : {
            "type" : "string"
          }
        },
        "keyDigest" : {
          "type" : "string",
          "description" : "The SHA digest of the public key of the remote cluster."
        },
        "owningClusterFilesystems" : {
          "type" : "array",
          "example" : "{ {'name':'gpfs0', 'access':'rw'}, {'name':'gpfs1', 'access':'ro'} }",
          "description" : "The names of filesystem of owning cluster and the access permissions to them.",
          "items" : {
            "$ref" : "#/definitions/OwningFilesystem"
          }
        }
      },
      "description" : "Summary information about a cluster that remotely mounts filesystems of a cluster that owns the filesytems"
    },
    "RemoteFilesystem" : {
      "type" : "object",
      "properties" : {
        "remoteFilesystem" : {
          "type" : "string",
          "description" : "The name of the filesystem on the remote cluster"
        },
        "owningFilesystem" : {
          "type" : "string",
          "description" : "The name of the filesystem on the owning cluster"
        },
        "owningCluster" : {
          "type" : "string",
          "description" : "The owning cluster of the remote filesystem"
        },
        "remoteMountPath" : {
          "type" : "string",
          "description" : "The remote mount path of the remote filesystem"
        },
        "mountOptions" : {
          "type" : "string",
          "description" : "The mount options of the remote filesystem"
        },
        "automount" : {
          "type" : "string",
          "description" : "The automount status of the remote filesystem"
        }
      },
      "description" : "Summary information about a remote filesystem"
    },
    "CopyConfig" : {
      "type" : "object",
      "required" : [ "targetFilesystem" ],
      "properties" : {
        "targetFilesystem" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The name of the filesystem the path belongs to."
        },
        "targetFileset" : {
          "type" : "string",
          "example" : "fset1",
          "description" : "The name of the fileset the path belongs to."
        },
        "targetPath" : {
          "type" : "string",
          "example" : "mydir",
          "description" : "The directory path relative to the filesystem's mount point or to the fileset path (if specified). "
        },
        "nodeclassName" : {
          "type" : "string",
          "example" : "cesNodes",
          "description" : "The name of the nodeclass"
        },
        "force" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether the underneath cp command is used with --force option"
        }
      }
    },
    "Cluster" : {
      "type" : "object",
      "properties" : {
        "clusterSummary" : {
          "$ref" : "#/definitions/ClusterSummary"
        },
        "cnfsSummary" : {
          "$ref" : "#/definitions/CnfsSummary"
        },
        "cesSummary" : {
          "$ref" : "#/definitions/CESSummary"
        },
        "capacityLicensing" : {
          "$ref" : "#/definitions/CapacityLiable4Licensing"
        }
      },
      "description" : "Summary information about a cluster"
    },
    "Info" : {
      "type" : "object",
      "properties" : {
        "restApiVersion" : {
          "type" : "string",
          "example" : "2.1.0",
          "description" : "Version of the REST API"
        },
        "serverVersion" : {
          "type" : "string",
          "example" : "5.0.0",
          "description" : "Version of the REST server"
        },
        "name" : {
          "type" : "string",
          "example" : "Spectrum Scale REST Management",
          "description" : "The name of the REST API"
        },
        "paths" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Summary information about the REST API node"
    },
    "SmbShareCreate" : {
      "type" : "object",
      "required" : [ "shareName" ],
      "properties" : {
        "shareName" : {
          "type" : "string",
          "example" : "smbShare",
          "description" : "The name of the SMB share."
        },
        "path" : {
          "type" : "string",
          "example" : "/mnt/gpfs0/fset1",
          "description" : "Specifies the path for the share."
        },
        "smbOptions" : {
          "$ref" : "#/definitions/SmbOptions"
        }
      },
      "description" : "Summary information about a smb share"
    },
    "FilesetInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "filesets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Fileset"
          }
        }
      }
    },
    "SystemHealthState" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12345,
          "description" : "The internal unique id of the state"
        },
        "component" : {
          "type" : "string",
          "example" : "NODE",
          "description" : "The component the state belongs to"
        },
        "reportingNode" : {
          "type" : "string",
          "example" : "testnode1.localnet.com",
          "description" : "The name of the node the state belongs to"
        },
        "activeSince" : {
          "type" : "string",
          "example" : "02.02.2017 11:22:13.184",
          "description" : "The time since when this state is active"
        },
        "entityType" : {
          "type" : "string",
          "example" : "NODE",
          "description" : "The type of the entity this state belongs to"
        },
        "entityName" : {
          "type" : "string",
          "example" : "testnode1.localnet.com",
          "description" : "The name of the entity the this state belongs to"
        },
        "parentName" : {
          "type" : "string",
          "example" : "null",
          "description" : "The name of the parent of the entity this state belongs to"
        },
        "state" : {
          "type" : "string",
          "example" : "HEALTHY",
          "description" : "The state of the component and entity on the specified reporting node"
        },
        "reasons" : {
          "type" : "array",
          "description" : "A list of events which led to this state (only set for non-healthy states)",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Summary information about a System Health event"
    },
    "Quota" : {
      "type" : "object",
      "properties" : {
        "quotaId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4711,
          "description" : "Internal id used for paging"
        },
        "filesystemName" : {
          "type" : "string",
          "example" : "gpfs0",
          "description" : "The filesystem context of this quota"
        },
        "filesetName" : {
          "type" : "string",
          "example" : "myFset1",
          "description" : "The fileset context of this quota. User and group quotas may will a fileset context if perFilesetQuota is enabled on the filesystem."
        },
        "quotaType" : {
          "type" : "string",
          "example" : "USR",
          "description" : "The quota type",
          "enum" : [ "USR", "GRP", "FILESET" ]
        },
        "objectName" : {
          "type" : "string",
          "example" : "myFset1",
          "description" : "Fileset/User/Group name"
        },
        "objectId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 128,
          "description" : "Fileset/user/group id"
        },
        "blockUsage" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "current block usage"
        },
        "blockQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 2048,
          "description" : "soft limit"
        },
        "blockLimit" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 4096,
          "description" : "hard limit"
        },
        "blockInDoubt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1024,
          "description" : "space in doubt"
        },
        "blockGrace" : {
          "type" : "string",
          "example" : "none",
          "description" : "grace period"
        },
        "filesUsage" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 32,
          "description" : "current number of files"
        },
        "filesQuota" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 50,
          "description" : "soft limit"
        },
        "filesLimit" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "hard limit"
        },
        "filesInDoubt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 3,
          "description" : "files in doubt"
        },
        "filesGrace" : {
          "type" : "string",
          "example" : "none",
          "description" : "grace period"
        },
        "defaultQuota" : {
          "type" : "boolean"
        }
      },
      "description" : "Detailed information about a quota"
    },
    "PDiskPaths" : {
      "type" : "object",
      "properties" : {
        "paths" : {
          "type" : "array",
          "example" : "//gss-22/dev/sdar",
          "description" : "List of paths of the pdisk",
          "items" : {
            "type" : "string"
          }
        },
        "noOfPathsActive" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The number of active paths for the pdisk"
        },
        "noOfPathsTotal" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "The total number of paths for the pdisk"
        },
        "expectedPathsActive" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The number of expected active paths for the pdisk"
        },
        "expectedPathsTotal" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "The total number of expected paths for the pdisk"
        },
        "noOfPathsActiveWrong" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The number of active wrong paths for the pdisk"
        },
        "noOfPathsTotalWrong" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The total number of wrong paths for the pdisk"
        }
      },
      "description" : "Information about paths of a physical disk"
    },
    "QuotaDefaultsInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "quotaDefaults" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/QuotaDefaults"
          }
        }
      }
    },
    "OwningClusterInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "owningClusters" : {
          "type" : "array",
          "description" : "owningClusters",
          "items" : {
            "$ref" : "#/definitions/OwningCluster"
          }
        }
      }
    },
    "PeerSnapshotCreate" : {
      "type" : "object",
      "properties" : {
        "comment" : {
          "type" : "string",
          "example" : "My peer snapshot",
          "description" : "A comment free of choice, but less than 50 characters."
        },
        "uid" : {
          "type" : "string",
          "example" : "HONGKONG",
          "description" : "An unique identifier for the cache site. If not specified, this defaults to the GPFS cluster ID."
        },
        "rpo" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies that user recovery point objective (RPO) snapshots are to be created for a primary fileset. This option cannot be specified with the --comment and --uid options.."
        },
        "wait" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Makes the creation of cache and home snapshots a synchronous process."
        }
      },
      "description" : "Summary information about an AFM Peer Snapshot"
    },
    "ServiceAction" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "example" : "start",
          "description" : "The action that shall be applied to a service [start, stop]"
        }
      },
      "description" : "Description of an action that shall be applied to a service"
    },
    "RangeData" : {
      "type" : "object",
      "properties" : {
        "domains" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Domain"
          }
        },
        "key" : {
          "type" : "string"
        }
      }
    },
    "OwningFilesystem" : {
      "type" : "object",
      "properties" : {
        "filesystem" : {
          "type" : "string",
          "description" : "The name of the owning cluster filesystem, or 'all' when addressing all file systems of owning cluster."
        },
        "access" : {
          "type" : "string",
          "description" : "The access permissions to the owning cluster filesystem"
        }
      },
      "description" : "Summary information about a owning cluster filesystem"
    },
    "CESAddress" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Internal identifier used for paging"
        },
        "nodeNumber" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "The number of the cesNode this address belongs to"
        },
        "nodeName" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "string",
          "example" : "xyz_server",
          "description" : "The CES Attributes assigned to this address"
        },
        "cesAddress" : {
          "type" : "string",
          "example" : "192.168.2.11",
          "description" : "The CES Address assigned to this node"
        },
        "cesGroup" : {
          "type" : "string",
          "example" : "LAN_4",
          "description" : "The CES group this node and address belongs to"
        },
        "preferredNode" : {
          "type" : "string",
          "example" : "gpfsgui-12",
          "description" : "The CES node that is preferred for hosting this CES IP address"
        },
        "unhostableNodes" : {
          "type" : "string",
          "example" : "gpfsgui-13,gpfsgui-14",
          "description" : "The CES nodes that never should host this CES IP address"
        }
      },
      "description" : "Summary information about a CES Address"
    },
    "FilesetAfmStateInlineResponse200" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "The status of the request",
          "$ref" : "#/definitions/RequestStatus"
        },
        "paging" : {
          "$ref" : "#/definitions/Paging"
        },
        "filesetAfmStateList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilesetAfmState"
          }
        }
      }
    }
  },
  "paths" : {
    "/scalemgmt/v2/access" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get details about your access token. If you are a security administrator a list of all access tokens is returned",
        "description" : "Returns detailed information about your access to this API. If you are a security administrator a list of all access tokens is returned",
        "operationId" : "remoteAccessGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteAccessInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Request access to this API",
        "description" : "The access request has to be granted by a security admin.",
        "operationId" : "remoteAccessPost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The data of the access request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AccessRequestData"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AccessRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/access/status" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get status about your access token.",
        "description" : "Returns the status of your access to this API.",
        "operationId" : "remoteAccessStatusGet",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteAccessStatusInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/ces/addresses" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of CES Addresses",
        "description" : "Returns the list of CES Addresses ",
        "operationId" : "cesaddressesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CESAddressInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/ces/addresses/{cesAddress}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a CES Address",
        "description" : "Returns a CES Address information ",
        "operationId" : "cesaddressesCesAddressGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cesAddress",
          "in" : "path",
          "description" : "IP address to query",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CESAddressInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/ces/services" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of CES Services",
        "description" : "Returns the list of CES Services ",
        "operationId" : "cesservicesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CESServiceInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/ces/services/{service}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a CES Service",
        "description" : "Returns detailed information for a CES Service ",
        "operationId" : "cesServicesServiceGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "service",
          "in" : "path",
          "description" : "Service name to query",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CESServiceInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/cliauditlog" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Retrieve a list of executed CLI commands",
        "description" : "Returns a list of executed CLI commands",
        "operationId" : "auditLogGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'command=mmchfs,node=testnode-11' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CliAuditLogInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/cluster" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get current configuration information",
        "description" : "Get current configuration information ",
        "operationId" : "clusterGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "List of clusters",
            "schema" : {
              "$ref" : "#/definitions/ClusterInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/components/elements" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of component elements",
        "description" : "Returns the list of component elements ",
        "operationId" : "elementsGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentElementInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/components/elements/{componentId}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a element",
        "description" : "Returns detailed information about a element ",
        "operationId" : "elementGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "componentId",
          "in" : "path",
          "description" : "The id of the element to query",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentElementInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/components/specifications" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of component specification",
        "description" : "Returns the list of component specification ",
        "operationId" : "specificationsGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentSpecificationInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/config" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get cluster config",
        "description" : "Returns the cluster config - for list of individual config properties consult documentation on mmlsconfig",
        "operationId" : "configGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConfigInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change an attribute value of the GPFS config.",
        "description" : "Changes an attribute value of the GPFS config.",
        "operationId" : "configPut",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfigUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List of filesystems in the cluster",
        "description" : "The filesystems endpoint returns a list of filesystems in the cluster ",
        "operationId" : "filesystemsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilesystemInlineResponse200"
            }
          },
          "400" : {
            "description" : "Required parameter missing",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a filesystem",
        "description" : "Returns detailed information about the filesystem ",
        "operationId" : "filesystemsFilesystemNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilesystemInlineResponse200"
            }
          },
          "400" : {
            "description" : "Required parameter missing",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/acl/{path}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get access control list of file/directory",
        "description" : "Returns the acl of a file or directory. Current implementation will always return NfsV4 ACLs even if native ACL is POSIX.",
        "operationId" : "aclGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The file path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fmyfile"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ACLInlineResponse"
            }
          },
          "400" : {
            "description" : "File not found.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "503" : {
            "description" : "File system not mounted.",
            "schema" : {
              "$ref" : "#/definitions/Http503ServiceUnavailable"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Write access control list of file/directory",
        "description" : "Sets the acl of a file or directory. Current implementation supports just Nfsv4 ACLs, but no POSIX ACLs.",
        "operationId" : "aclPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The file path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fmyfile"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AccessControlList"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid fs, path or acl",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/afm/state" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List afm state in a file system",
        "description" : "List afm state in a filesystem ",
        "operationId" : "filesetAfmState",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilesetAfmStateInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/audit" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Enable/Disable/Update the file system auditing for a file system.",
        "description" : "Enable/Disable/Update the file system auditing for a file system.",
        "operationId" : "enableDisableFsAuditPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileAuditOperation"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/directory/{path}" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Creates a new directory on a GPFS file system",
        "description" : "Creates a new directory on a GPFS file system and sets the owner of it. You can specify user or group or both. If both the id and the name are specified the id takes precedence over the name.",
        "operationId" : "directoryPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileOwner"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system, path or owner",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Remove a directory from a GPFS file system",
        "description" : "Remove a directory from a GPFS file system",
        "operationId" : "directoryDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/directoryCopy/{sourcePath}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a directory on a GPFS file system",
        "description" : "Copy a directory from a source path to a target path on a GPFS file system",
        "operationId" : "fileCopyPutv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourcePath",
          "in" : "path",
          "description" : "The source path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fdir1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/disks" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of disks",
        "description" : "Returns the list of disks in a filesystem ",
        "operationId" : "disksGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DiskInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/disks/{diskName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a disk",
        "description" : "Returns detailed information about a disk in a filesystem",
        "operationId" : "disksDiskNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "diskName",
          "in" : "path",
          "description" : "The name of the disk to query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DiskInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of filesets",
        "description" : "Returns the list of filesets in a filesystem ",
        "operationId" : "filesetsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilesetInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new fileset",
        "description" : "Create a new fileset. Linking the fileset is optional. To link, provide: path, owner and permissions. ",
        "operationId" : "filesetsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FilesetCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a fileset",
        "description" : "Returns detailed information about a fileset ",
        "operationId" : "filesetsFilesetNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FilesetInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change an existing fileset",
        "description" : "Change the properties of an existing fileset.",
        "operationId" : "filesetsFilesetNamePutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FilesetChange"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a fileset",
        "description" : "Delete a fileset (all files / folders under this fileset will be deteled) ",
        "operationId" : "filesetsFilesetNameDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "qosClass",
          "in" : "query",
          "description" : "The QOS class the operation will be performed in",
          "required" : false,
          "type" : "string",
          "enum" : [ "maintenance", "other" ]
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/afmctl" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "The AFM control functions",
        "description" : "The AFM control functions",
        "operationId" : "failbackPost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AfmCtl"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/RequestStatus"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/directory/{path}" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Creates a new directory on a fileset",
        "description" : "Creates a new directory on a fileset and sets the owner of it. You can specify user or group or both. If both the id and the name are specified the id takes precedence over the name.",
        "operationId" : "directoryPostv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the fileset path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileOwner"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system, fileset, path or owner",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Remove a directory from a fileset",
        "description" : "Remove a directory from a fileset",
        "operationId" : "directoryDeletev2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the fileset path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system, fileset or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/directoryCopy/{sourcePath}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a directory on a GPFS file system",
        "description" : "Copy a directory from a source path to a target path on a GPFS file system",
        "operationId" : "fileCopyPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourcePath",
          "in" : "path",
          "description" : "The source path relative to the fileset path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fdir1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/link" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Link an existing fileset",
        "description" : "",
        "operationId" : "filesetsLinkv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FilesetLink"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Unlink an existing fileset",
        "description" : "",
        "operationId" : "filesetsUnlinkv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "description" : "Specifies if the unlink should be forced. Default is false.",
          "required" : false,
          "type" : "boolean",
          "enum" : [ "true", "false" ]
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/psnaps" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new AFM peer snapshot",
        "description" : "Create a new AFM peer snapshot ",
        "operationId" : "psnapsFilesetsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PeerSnapshotCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/psnaps/{snapshotName}" : {
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete an existing AFM peer snapshot",
        "description" : "Delete an existing AFM peer snapshot ",
        "operationId" : "psnapsFilesetsSnapshotNameDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/quotadefaults" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List quota defaults in the cluster",
        "description" : "Returns a list of quota defaults in the cluster. With no parameters, all quota defaults will be returned. For all numbers returned, the unit in which the number of blocks is displayed is 1K. ",
        "operationId" : "quotaDefaultsFilesetGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name or :all:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name or :all:",
          "required" : true,
          "type" : "string",
          "x-example" : "myfileset"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'quotaType=GRP,deviceName=gpfs0' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/QuotaDefaultsInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set the quota defaults USR, GRP or FILESET for a file system",
        "description" : "Set the quota defaults USR, GRP or FILESET for a file system.",
        "operationId" : "quotaDefaultsFsetPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string",
          "x-example" : "myfileset"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaDefaultsCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Enable/Disable the quota defaults for a fileset.",
        "description" : "Enable/Disable the quota defaults for a fileset.",
        "operationId" : "enableDisableQuotaDefaultsPutv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string",
          "x-example" : "myfileset"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaDefaultsFsetConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/quotas" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List quotas in the cluster",
        "description" : "Returns a list of quotas in the cluster. With no parameters, all limits quotas will be returned. For all quota numbers returned, the unit in which the number of blocks is displayed is 1K. ",
        "operationId" : "quotasGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The filesetName or \\_all_\\_",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/QuotaInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set quota limits / default quota limits / quota grace settings",
        "description" : "Set quota limits / default quota limits ",
        "operationId" : "quotasPostv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/snapshotCopy/{snapshotName}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a snapshot on a GPFS file system",
        "description" : "Copy files from a source snapshot to a target path on a GPFS file system",
        "operationId" : "snapshotCopyPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/snapshotCopy/{snapshotName}/path/{sourcePath}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a directory from a path relative to a snapshot on a GPFS file system",
        "description" : "Copy a directory from a source path relative to a snapshot to a target path on a GPFS file system",
        "operationId" : "snapshotCopyPathPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourcePath",
          "in" : "path",
          "description" : "The source path relative to the snapshot path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fdir1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/snapshots" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List snapshots for the specified fileset",
        "description" : "List snapshots for the specified fileset",
        "operationId" : "snapshotsFilesetsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name, :all:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SnapshotInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new snapshot",
        "description" : "Create a new snapshot ",
        "operationId" : "snapshotsFilesetsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SnapshotCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/snapshots/{snapshotName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Read a snapshot for a fileset",
        "description" : "Read a snapshot for a fileset",
        "operationId" : "snapshotsFilesetSnapshotNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SnapshotInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a snapshot",
        "description" : "Delete a snapshot ",
        "operationId" : "snapshotsFilesetsSnapshotNameDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/symlink/{linkPath}" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a symlink for a path from a fileset",
        "description" : "Create a symlink for a path from a fileset",
        "operationId" : "symlinkPostv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "linkPath",
          "in" : "path",
          "description" : "The symlink path relative to the fileset path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The target path of the symlink relative to the filesystem's mount point or fileset path ",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SymlinkPath"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system, fileset or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/filesets/{filesetName}/symlink/{path}" : {
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Remove a symlink from a fileset",
        "description" : "Remove a symlink from a fileset",
        "operationId" : "symlinkDeletev2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "filesetName",
          "in" : "path",
          "description" : "The fileset name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the fileset path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/mount" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Mount a specific file system.",
        "description" : "\"Mount a specific file system.",
        "operationId" : "mountFsv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MountConfiguration"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/owner/{path}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get file/directory owner",
        "description" : "Returns the owner of a file or directory",
        "operationId" : "ownerGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The file path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fmyfile"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FileOwnerInlineResponse"
            }
          },
          "400" : {
            "description" : "File not found.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "503" : {
            "description" : "File system not mounted.",
            "schema" : {
              "$ref" : "#/definitions/Http503ServiceUnavailable"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set file/directory owner",
        "description" : "Sets the owner of a file or directory. You can specify user or group or both. If both the id and the name are specified the id takes precedence over the name.",
        "operationId" : "ownerPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The file path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fmyfile"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileOwner"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid fs, path or owner",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/policies" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List policies in the cluster",
        "description" : "Returns a list of policies in the cluster. ",
        "operationId" : "policiesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PolicyInlineResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set a policy for a file system",
        "description" : "Set a policy for a file system ",
        "operationId" : "policiesPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PolicyCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/quotadefaults" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List quota defaults in the cluster",
        "description" : "Returns a list of quota defaults in the cluster. With no parameters, all quota defaults will be returned. For all numbers returned, the unit in which the number of blocks is displayed is 1K. ",
        "operationId" : "quotaDefaultsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name or :all:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'quotaType=GRP,deviceName=gpfs0' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/QuotaDefaultsInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set the quota defaults USR, GRP or FILESET for a file system",
        "description" : "Set the quota defaults USR, GRP or FILESET for a file system.",
        "operationId" : "quotaDefaultsFsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaDefaultsCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Enable/Disable the quota defaults for a file system.",
        "description" : "Enable/Disable the quota defaults for a file system.",
        "operationId" : "enableDisableQuotaDefaultsPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaDefaultsFsConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/quotagracedefaults" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List quota defaults in the cluster",
        "description" : "Returns a list of quota defaults in the cluster. With no parameters, all quota defaults will be returned. For all numbers returned, the unit in which the number of blocks is displayed is 1K. ",
        "operationId" : "quotaGraceDefaultsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name or :all:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'quotaType=GRP,deviceName=gpfs0' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/QuotaDefaultsInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set the quota defaults USR, GRP or FILESET for a file system",
        "description" : "Set the quota defaults USR, GRP or FILESET for a file system.",
        "operationId" : "quotaGraceDefaultsFsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaGraceDefaultsCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/quotamanagement" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Enable/Disable the quota management for a file system.",
        "description" : "Enable/Disable the quota management for a file system.",
        "operationId" : "enableDisableFsQuotaManagementPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FilesystemQuotaManagement"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/quotas" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List quotas in the cluster",
        "description" : "Returns a list of quotas in the cluster. With no parameters, all limits quotas will be returned. For all quota numbers returned, the unit in which the number of blocks is displayed is 1K. ",
        "operationId" : "quotasGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/QuotaInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Set quota limits / default quota limits / quota grace settings",
        "description" : "Set quota limits / default quota limits ",
        "operationId" : "quotasPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "name of the filesystem",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QuotaCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/resume" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Resume a specific file system.",
        "description" : "\"Mount a specific file system.",
        "operationId" : "resumeFsv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/snapshotCopy/{snapshotName}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a snapshot on a GPFS file system",
        "description" : "Copy files from a source snapshot to a target path on a GPFS file system",
        "operationId" : "snapshotCopyPutv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/snapshotCopy/{snapshotName}/path/{sourcePath}" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Copy a directory from a path relative to a snapshot on a GPFS file system",
        "description" : "Copy a directory from a source path relative to a snapshot to a target path on a GPFS file system",
        "operationId" : "snapshotCopyPathPutv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourcePath",
          "in" : "path",
          "description" : "The source path relative to the snapshot path",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir%2Fdir1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CopyConfig"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/snapshots" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List snapshots in a file system",
        "description" : "List snapshots in a filesystem ",
        "operationId" : "snapshotsFilesystemsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SnapshotInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new snapshot",
        "description" : "Create a new snapshot ",
        "operationId" : "snapshotsFilesystemPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SnapshotCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/snapshots/{snapshotName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Read a snapshot for a fileset",
        "description" : "Read a snapshot for a fileset",
        "operationId" : "snapshotsFilesystemSnapshotNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SnapshotInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a snapshot",
        "description" : "Delete a snapshot ",
        "operationId" : "snapshotsFilesystemSnapshotNameDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "snapshotName",
          "in" : "path",
          "description" : "The snapshot name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/suspend" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Suspend a specific file system.",
        "description" : "\"Mount a specific file system.",
        "operationId" : "mountFsv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/symlink/{linkPath}" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a symlink for a path from a GPFS file system",
        "description" : "Create a symlink for a path from a GPFS file system",
        "operationId" : "symlinkPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "linkPath",
          "in" : "path",
          "description" : "The symlink path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The target path of the symlink relative to the filesystem's mount point or fileset path ",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SymlinkPath"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/symlink/{path}" : {
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Remove a symlink from a GPFS file system",
        "description" : "Remove a symlink from a GPFS file system",
        "operationId" : "symlinkDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The name of the file system",
          "required" : true,
          "type" : "string",
          "x-example" : "gpfs0"
        }, {
          "name" : "path",
          "in" : "path",
          "description" : "The directory path relative to the filesystem's mount point",
          "required" : true,
          "type" : "string",
          "x-example" : "mydir"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid file system or path",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/filesystems/{filesystemName}/unmount" : {
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Unmount a specific file system.",
        "description" : "\"Unmount a specific file system.",
        "operationId" : "unmountFsv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filesystemName",
          "in" : "path",
          "description" : "The filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UnmountConfiguration"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of recovery groups",
        "description" : "Returns a list of recovery groups",
        "operationId" : "recoveryGroupGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecoveryGroupInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/RecoveryGroupInlineResponse200"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups/{recoveryGroupName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a recovery group",
        "description" : "Returns detailed information about a recovery group ",
        "operationId" : "recoveryGroupNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recoveryGroupName",
          "in" : "path",
          "description" : "name of recovery group to query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecoveryGroupInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups/{recoveryGroupName}/pdisks" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of pdisks",
        "description" : "Returns the list of pdisks",
        "operationId" : "pdisksGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recoveryGroupName",
          "in" : "path",
          "description" : "The recovery group name, :all:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PhysicalDiskInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups/{recoveryGroupName}/pdisks/{pdiskName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a pdisk",
        "description" : "Returns detailed information about a pdisk",
        "operationId" : "pdisksGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recoveryGroupName",
          "in" : "path",
          "description" : "The recovery group name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pdiskName",
          "in" : "path",
          "description" : "Name of pdisk to query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PhysicalDiskInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups/{recoveryGroupName}/vdisks" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of vdisk",
        "description" : "Returns the list of vdisk",
        "operationId" : "recoveryGroupGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recoveryGroupName",
          "in" : "path",
          "description" : "The recovery group name, :all:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VDiskInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/VDiskInlineResponse200"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/gnr/recoverygroups/{recoveryGroupName}/vdisks/{vdiskName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a vdisk",
        "description" : "Returns detailed information about a vdisk",
        "operationId" : "recoveryGroupNameGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recoveryGroupName",
          "in" : "path",
          "description" : "The recovery group name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vdiskName",
          "in" : "path",
          "description" : "Name of vdisk to query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VDiskInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/info" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get REST API info",
        "description" : "Returns the REST API status ",
        "operationId" : "infoGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InfoInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/jobs" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get list of asynchronous REST API jobs",
        "description" : "Returns list of asynchronous REST API jobs ",
        "operationId" : "jobsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/JobInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/jobs/{jobId}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get job details",
        "description" : "Returns the job details of a REST API job",
        "operationId" : "jobsGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. '\\_all\\_' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/JobInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Cancel a job",
        "description" : "Cancels a REST API job",
        "operationId" : "jobsDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "force",
          "in" : "query",
          "description" : "if true force job cancellation (sends a kill -9 to process)",
          "required" : false,
          "type" : "boolean"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/JobInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nfs/exports" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List of export in the cluster",
        "description" : "The nfs exports endpoint returns a list of nfs exports in the cluster ",
        "operationId" : "nfsExportsGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NfsExportInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new nfs export",
        "description" : "Create a new nfs export.",
        "operationId" : "nfsExportPost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NfsExportCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nfs/exports/{exportPath}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a export",
        "description" : "Returns detailed information about the export ",
        "operationId" : "nfsExportPathGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exportPath",
          "in" : "path",
          "description" : "path of the export",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NfsExportInlineResponse200"
            }
          },
          "400" : {
            "description" : "NFS export not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change an existing nfs export",
        "description" : "Change the properties of an existing nfs export.",
        "operationId" : "nfsExportPathPut",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exportPath",
          "in" : "path",
          "description" : "path of the export",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NfsExportUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "NFS export not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a NFS export",
        "description" : "Delete a NFS export",
        "operationId" : "nfsExportPathDelete",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exportPath",
          "in" : "path",
          "description" : "path of the export",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "NFS export not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodeclasses" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of Nodeclasses",
        "description" : "Returns the list of Nodeclasses ",
        "operationId" : "nodeclassesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'type=SYSTEM' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeClassInlineResponse"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new user-defined GPFS nodeclass",
        "description" : "Create a new user-defined GPFS nodeclass. ",
        "operationId" : "nodeclassPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeClassCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodeclasses/{nodeclassName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a Nodeclass",
        "description" : "Returns detailed information about the Nodeclass",
        "operationId" : "nodeclassNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeclassName",
          "in" : "path",
          "description" : "nodeclass name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'type=SYSTEM' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeClassInlineResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change an existing user-defined GPFS nodeclass",
        "description" : "Change the member nodes of an existing nodeclass.",
        "operationId" : "nodeclassNamePutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeclassName",
          "in" : "path",
          "description" : "The nodeclass name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeClassChange"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete an existing user-defined GPFS nodeclass",
        "description" : "Delete an existing user-defined GPFS nodeclass ",
        "operationId" : "nodeclassNameDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeclassName",
          "in" : "path",
          "description" : "The nodeclass name, :all:, :all\\_local: or :all\\_remote:",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of Nodes",
        "description" : "Returns the list of Nodes ",
        "operationId" : "nodesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Add one or more nodes to the GPFS cluster",
        "description" : "Add one or more nodes to the GPFS cluster. ",
        "operationId" : "nodesPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes/{name}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing for a Node",
        "description" : "Returns summary for a Node ",
        "operationId" : "nodesNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass or node name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete one or more existing nodes from the GPFS cluster",
        "description" : "Delete one or more existing nodes from the GPFS cluster ",
        "operationId" : "nodesDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass or node name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes/{name}/health/events" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get System Health events",
        "description" : "Returns a list of currently active System Health events for the given node or nodeclass",
        "operationId" : "eventsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass, node name or :all:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SystemHealthEventsInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes/{name}/health/states" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get System Health states",
        "description" : "Returns a list of currently active System Health states for the given node or nodeclass",
        "operationId" : "statesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass, node name or :all:",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SystemHealthStatesInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes/{name}/services" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get status for all CES services on a node or nodeclass in the GPFS cluster",
        "description" : "Get status for all CES services on a node or nodeclass in the GPFS cluster",
        "operationId" : "nodesServicesGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass or node name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nodes/{name}/services/{serviceName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get status for a CES service on a node or nodeclass in the GPFS cluster",
        "description" : "Get status for a CES service on a node or nodeclass in the GPFS cluster",
        "operationId" : "nodesServiceGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass or node name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "name of the service to query the status",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Start, Stop a service on a node or nodeclass in the GPFS cluster.",
        "description" : "Start, Stop a service on a node or nodeclass in the GPFS cluster. ",
        "operationId" : "nodesServicePutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "nodeclass or node name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "name of the service to start/stop",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceAction"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nsds" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing of nsds",
        "description" : "Returns the list of nsds ",
        "operationId" : "nsdsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NsdInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/NsdInlineResponse200"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/nsds/{nsdName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a nsd",
        "description" : "Returns detailed information about a nsd ",
        "operationId" : "nsdsNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nsdName",
          "in" : "path",
          "description" : "name of nsd to query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NsdInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/perfmon/data" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get performance data",
        "description" : "Get performance data",
        "operationId" : "performanceDataGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Performance Data",
            "schema" : {
              "$ref" : "#/definitions/PerformanceDataInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/perfmon/sensors" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get the sensor configuration",
        "description" : "Get the sensor configuration",
        "operationId" : "sensorConfigGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Sensor Configuration",
            "schema" : {
              "$ref" : "#/definitions/SensorConfigInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/perfmon/sensors/{sensorName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get the sensor configuration",
        "description" : "Get the sensor configuration",
        "operationId" : "sensorConfigGetOnev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sensorName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Sensor Configuration",
            "schema" : {
              "$ref" : "#/definitions/SensorConfigInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get the sensor configuration",
        "description" : "Get the sensor configuration",
        "operationId" : "sensorConfigGetOnev2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sensorName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SensorConfigUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/perfmon/stats" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get performance data stat information",
        "description" : "Get performance data stat information",
        "operationId" : "performanceDataStatsv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Performance Data",
            "schema" : {
              "$ref" : "#/definitions/PerformanceDataInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/refreshTask/enqueue" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Enqueue a background refresh task",
        "description" : "",
        "operationId" : "enqueueRefreshTask",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "taskId",
          "in" : "query",
          "description" : "The ID of the task to be executed.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "maxDelay",
          "in" : "query",
          "description" : "Maximum delay in seconds.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/authenticationkey" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get the public RSA authentication key that is used for remote mounting",
        "description" : "Get the public RSA authentication key of a cluster that is used for remote mounting. This API can be executed on both, the cluster that owns the filesystems and the cluster that remotely mounts filesystems. The public key can be used as input for POST & PUT /scalemgmt/v2/remotemount/owningclusters and for POST & PUT /scalemgmt/v2/remotemount/remoteclusters. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth show'.",
        "operationId" : "authenticationKeyGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuthenticationKeyInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Generate a new RSA authentication key pair that is used for remote mounting",
        "description" : "Generate a new RSA authentication key pair (private and public) on a cluster that is used for remote mounting. This API can be executed on both, the cluster that owns the filesystems and the cluster that remotely mounts filesystems. Use GET /scalemgmt/v2/remotemount/authenticationkey to check if a new authenitaction key has already been generated. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth genkey new'.",
        "operationId" : "authenticationKeyPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Commit or propagate a new RSA authentication key that is used for remote mounting",
        "description" : "Commit or propagate a new RSA authentication key on a cluster that is used for remote mounting. This API can be executed on both, the cluster that owns the filesystems and the cluster that remotely mounts filesystems. Use POST /scalemgmt/v2/remotemount/authenticationkey to generate a new RSA key pair (private and public key) for remote mounting. Use GET /scalemgmt/v2/remotemount/authenticationkey to check if a new authenitaction key has already been generated. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth genkey commit|propagate'.",
        "operationId" : "authenticationKeyPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "action",
          "in" : "query",
          "description" : "The action to perform on the authentication key, either commit or propagate.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "nodes",
          "in" : "query",
          "description" : "Only allowed for the propagate action. Comma separated list of nodes or node classes that define the nodes on which to propagate.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/owningclusters" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List clusters that own filesystems that can be mounted remotely",
        "description" : "List the clusters that own filesystems that can be mounted remotely. This API must be executed on a cluster that mounts filesystems remotely. Read also the documentation of CLI command 'mmremotecluster show all'.",
        "operationId" : "owningClustersGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OwningClusterInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Register a cluster that owns filesystems that can be mounted remotely",
        "description" : "Register a cluster that own filesystems that can be mounted remotely. This API must be executed on the cluster that mounts filesystems remotely. The node names specified in contactNodes must be known host names. If these node names cannot be resolved via DNS, then they must be added to /etc/hosts on all nodes of the cluster that mounts the filesystem remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotecluster add'.",
        "operationId" : "owningClustersPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OwningClusterCreateUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/owningclusters/{owningCluster}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a cluster that own filesystems that can be mounted remotely",
        "description" : "Get detailed information about a cluster that own filesystems that can be mounted remotely. This API must be executed on a cluster that mounts filesystems remotely. Read also the documentation of CLI command 'mmremotecluster show owningCluster'.",
        "operationId" : "owningClustersNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owningCluster",
          "in" : "path",
          "description" : "owning cluster name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OwningClusterInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Update registration of a cluster that own filesystems that can be mounted remotely",
        "description" : "Update registration of a cluster that own filesystems that can be mounted remotely. This API must be executed on the cluster that mounts filesystems remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotecluster update'.",
        "operationId" : "owningClustersPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owningCluster",
          "in" : "path",
          "description" : "owning cluster name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OwningClusterCreateUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Unregister a cluster that own filesystems that can be mounted remotely",
        "description" : "Unregister a cluster that own filesystems that can be mounted remotely. This API must be executed on the cluster that mounts filesystems remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotecluster delete'.",
        "operationId" : "owningClustersDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owningCluster",
          "in" : "path",
          "description" : "owning cluster name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remoteclusters" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List clusters that mount filesystems remotely",
        "description" : "List the clusters that mount filesystems of an owning cluster remotely. This API must be executed on the cluster that owns the filesystems that should be mounted remotely. Read also the documentation of CLI command 'mmauth show all'.",
        "operationId" : "remoteClustersGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteClusterInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Register a cluster that can mount filesystems remotely",
        "description" : "Register a cluster that should can one or more filesystems of a owning cluster. This API must be executed on a cluster that owns filesystems that should be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth add'.",
        "operationId" : "remoteClustersPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoteClusterCreateUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remoteclusters/{remoteCluster}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a cluster that mounts filesystems remotely",
        "description" : "Get detailed information about a cluster that mounts filesystems remotely. This API must be executed on the cluster that owns filesystems that should be mounted remotely. Read also the documentation of CLI command 'mmauth show remoteCluster'.",
        "operationId" : "remoteClustersNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteClusterInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Update registration of a cluster that can mount filesystems remotely",
        "description" : "Update registration of a cluster that can mount one or more filesystems of a owning cluster. This API must be executed on a cluster that owns filesystems that should be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth update'.",
        "operationId" : "remoteClustersPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoteClusterCreateUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Unregister a cluster that can mount filesystems remotely",
        "description" : "Unregister a cluster that can mount one or more filesystems remotely. This API must be executed on a cluster that owns the filesystems that should no longer be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth delete'.",
        "operationId" : "remoteClustersDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remoteclusters/{remoteCluster}/access/{owningClusterFilesystem}" : {
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Authorize a cluster to mount a filesystem remotely",
        "description" : "Authorize a cluster to mount a filesystem remotely. Specify 'all' as filesystem name to authorize the cluster to mount any filesystem of the owning cluster. This API must be executed on a cluster that owns the filesystems that should be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth grant'.",
        "operationId" : "remoteClustersGrantAccessv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "owningClusterFilesystem",
          "in" : "path",
          "description" : "filesystem name or 'all'",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OwningFilesystemAccess"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change permission of a cluster for mounting a filesystem remotely",
        "description" : "Change the permission of a cluster for mounting a filesystem remotely. Specify 'all' as filesystem name to allow the cluster to remotely mount any filesystem of the owning cluster. This API must be executed on a cluster that owns the filesystems that should be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth grant'.",
        "operationId" : "remoteClustersChangeAccessv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "owningClusterFilesystem",
          "in" : "path",
          "description" : "filesystem name or 'all'",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OwningFilesystemAccess"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remoteclusters/{remoteCluster}/deny/{owningClusterFilesystem}" : {
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Remove permission of a cluster to mount a filesystem remotely",
        "description" : "Remove permission of a cluster to mount a filesystem of the owning cluster. Specify 'all' as filesystem name to remove permission for mounting any filesystem of the owning cluster. This API must be executed on a cluster that owns the filesystems that should no longer be mounted remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmauth deny'.",
        "operationId" : "remoteClustersDenyAccessv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteCluster",
          "in" : "path",
          "description" : "remote cluster name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "owningClusterFilesystem",
          "in" : "path",
          "description" : "filesystem name or 'all'",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remotefilesystems" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List remote filesystems",
        "description" : "List the remote filesystems. This API must be executed on a cluster that mounts filesystems remotely. Read also the documentation of CLI command 'mmremotefs show {all | -C owningCluster}'.",
        "operationId" : "remoteFilesystemsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owningCluster",
          "in" : "query",
          "description" : "List remote filesystems for a specifc remote cluster.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteFilesystemInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new remote filesystem",
        "description" : "Create a new remote filesystem. A remote filesystem is mounting a filesystem from a cluster that owns the filesystem. This API must be executed on the cluster that should mount a filesystem remotely. When specifying the mountOnNodes parameter, the remote filesystem will also be mounted on the specified cluster nodes. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotefs add'.",
        "operationId" : "remoteFilesystemsPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoteFilesystemCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/remotemount/remotefilesystems/{remoteFilesystem}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a remote filesystem",
        "description" : "Get detailed information about a remote filesystem. This API must be executed on the cluster that mounts filesystems remotely. Read also the documentation of CLI command 'mmremotefs show remoteFilesystem'.",
        "operationId" : "remoteFilesystemsNameGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteFilesystem",
          "in" : "path",
          "description" : "remote filesystem name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RemoteFilesystemInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Update an existing remote filesystem",
        "description" : "Update an existing remote filesystem. A remote filesystem is mounting a filesystem from a cluster that owns the filesystem. This API must be executed on the cluster that mounts the filesystem remotely. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotefs update'.",
        "operationId" : "remoteFilesystemsPutv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteFilesystem",
          "in" : "path",
          "description" : "remote filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoteFilesystem"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a remote filesystem",
        "description" : "Delete a remote filesystem. This API must be executed on the cluster that mounts the filesystem remotely. This will NOT delete the filesystem on the owning cluster. Only users with role 'Administrator' or 'CNSS Operator' have permission to for this REST endpoint. Read also the documentation of CLI command 'mmremotefs delete'.",
        "operationId" : "remoteFilesystemsDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "remoteFilesystem",
          "in" : "path",
          "description" : "remote filesystem name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "description" : "Force deletion of the remote filesystem",
          "required" : false,
          "type" : "string",
          "enum" : [ "yes", "no", "true", "false" ]
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/smb/shares" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "List of smb shares in the cluster",
        "description" : "The smb shares endpoint returns a list of smb shares in the cluster ",
        "operationId" : "smbSharesGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SmbShareInlineResponse200"
            }
          },
          "400" : {
            "description" : "SMB share not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Create a new smb share",
        "description" : "Create a new smb share.",
        "operationId" : "smbSharePost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SmbShareCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/RequestStatus"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/smb/shares/{shareName}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get detailed information about a smb shares",
        "description" : "Returns detailed information about the smb shares ",
        "operationId" : "smbShareNameGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "shareName" ]
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SmbShareInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid share name",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Change an existing smb share",
        "description" : "Change the properties of an existing smb share.",
        "operationId" : "smbSharePathPut",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SmbShareUpdate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "SMB share not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete a SMB share",
        "description" : "Delete a SMB share",
        "operationId" : "smbShareNameDelete",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "shareName" ]
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "SMB share not found",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/smb/shares/{shareName}/acl" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get access control list of share",
        "description" : "Returns the acl of a SMB share",
        "operationId" : "aclGetv2_0",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "description" : "The name of the smb share",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SmbExportAclInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid share name.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete complete access control list of a SMB share",
        "description" : "Deletes the ACL of a SMB share. Note that the ACL will not be empty after this operation. Instead, this basically replaces the current ACL with one the grants Everyone full access.",
        "operationId" : "aclDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "description" : "The name of the smb share",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid share name.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/smb/shares/{shareName}/acl/{name}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get access control list entry of a specific user/group/system of share",
        "description" : "Returns an access control list entry of a SMB share",
        "operationId" : "aclGetNamev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "description" : "The name of the smb share",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the user,group or system",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SmbExportAclInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid share name.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Adds an entry to the access control list of a SMB share",
        "description" : "Adds an entry to the ACL of a SMB share. If an entry for the specified name already exists it will be replaced. Note that the share name and the user name are part of both the URL and the json payload. In the json both are optional, but if specified they must match those in the URL.",
        "operationId" : "acPutEntryv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "description" : "The name of the smb share",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the user,group or system",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SmbExportAclEntry"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid share name.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete an entry from the access control list of a SMB share",
        "description" : "Deletes an entry from the ACL of a SMB share.",
        "operationId" : "aclDeleteEntryv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "shareName",
          "in" : "path",
          "description" : "The name of the smb share",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the user,group or system",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid share name.",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "An unexpected error occurred.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/thresholds" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get list of all threshold rules",
        "description" : "Get list of all threshold rules ",
        "operationId" : "thresholdsGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter objects by expression, e.g. 'status=HEALTHY,entityType=FILESET' ",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "List of threshold rules",
            "schema" : {
              "$ref" : "#/definitions/ThresholdsInlineResponse200"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Add a threshold rule to the GPFS cluster",
        "description" : "Add a threshold rule to the GPFS cluster. ",
        "operationId" : "thresholdPostv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ThresholdCreate"
          }
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/scalemgmt/v2/thresholds/{name}" : {
      "get" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Get listing for a threshold rule",
        "description" : "Returns summary for a threshold rule. ",
        "operationId" : "thresholdGetv2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "threshold rule name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma separated list of fields to be included in response. ':all:' selects all available fields.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ThresholdsInlineResponse200"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server error.",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Spectrum Scale REST API v2" ],
        "summary" : "Delete an existing threshold rule from the GPFS cluster",
        "description" : "Delete an existing threshold rule from the GPFS cluster. ",
        "operationId" : "thresholdDeletev2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "threshold rule name",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AsyncRequestResponse"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Http400BadRequest"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Http500InternalServerError"
            }
          }
        }
      },
      "parameters" : [ ]
    }
  },
  "x-ibm-services" : [ "" ]
}
